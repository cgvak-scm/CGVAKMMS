//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MMS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MMSCGVAKDBEntities : DbContext
    {
        public MMSCGVAKDBEntities()
            : base("name=MMSCGVAKDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Department_Master> Department_Master { get; set; }
        public virtual DbSet<Designation_Master> Designation_Master { get; set; }
        public virtual DbSet<Employee_Department> Employee_Department { get; set; }
        public virtual DbSet<Employee_Master> Employee_Master { get; set; }
        public virtual DbSet<MMS_Attachment> MMS_Attachment { get; set; }
        public virtual DbSet<MMS_Blood_Details> MMS_Blood_Details { get; set; }
        public virtual DbSet<MMS_Employee_Attachment> MMS_Employee_Attachment { get; set; }
        public virtual DbSet<MMS_Employee_Location> MMS_Employee_Location { get; set; }
        public virtual DbSet<MMS_Employee_Master> MMS_Employee_Master { get; set; }
        public virtual DbSet<MMS_Login_Master> MMS_Login_Master { get; set; }
        public virtual DbSet<MMS_Meeting_Category> MMS_Meeting_Category { get; set; }
        public virtual DbSet<MMS_Meeting_Details> MMS_Meeting_Details { get; set; }
        public virtual DbSet<MMS_Meeting_Master> MMS_Meeting_Master { get; set; }
        public virtual DbSet<MMS_Meeting_Participant> MMS_Meeting_Participant { get; set; }
        public virtual DbSet<MMS_Meeting_Status> MMS_Meeting_Status { get; set; }
        public virtual DbSet<MMS_Meeting_Status_Update> MMS_Meeting_Status_Update { get; set; }
        public virtual DbSet<MMS_Meeting_Template> MMS_Meeting_Template { get; set; }
        public virtual DbSet<MMS_Meeting_Template_Users> MMS_Meeting_Template_Users { get; set; }
        public virtual DbSet<MMS_Notifications> MMS_Notifications { get; set; }
        public virtual DbSet<MMS_Review_Frequency> MMS_Review_Frequency { get; set; }
        public virtual DbSet<MMS_Track_ReviewTasks> MMS_Track_ReviewTasks { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Task_Status> Task_Status { get; set; }
        public virtual DbSet<MMS_Priority> MMS_Priority { get; set; }
        public virtual DbSet<MailDetail_TaskNotCompleted> MailDetail_TaskNotCompleted { get; set; }
        public virtual DbSet<vw_get_Designations> vw_get_Designations { get; set; }
        public virtual DbSet<vw_get_EmployeeDepartment> vw_get_EmployeeDepartment { get; set; }
        public virtual DbSet<vw_get_EmployeeDepartments> vw_get_EmployeeDepartments { get; set; }
        public virtual DbSet<vw_get_Employees> vw_get_Employees { get; set; }
        public virtual DbSet<vw_get_EmployeesTech> vw_get_EmployeesTech { get; set; }
    
        [DbFunction("MMSCGVAKDBEntities", "split")]
        public virtual IQueryable<split_Result> split(string delimited, string delimiter)
        {
            var delimitedParameter = delimited != null ?
                new ObjectParameter("delimited", delimited) :
                new ObjectParameter("delimited", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<split_Result>("[MMSCGVAKDBEntities].[split](@delimited, @delimiter)", delimitedParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<getmeetingdetailsNew_Result> getmeetingdetailsNew(Nullable<int> chairPerson, Nullable<int> participant, Nullable<int> status, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, string priority, Nullable<bool> isNotClosed, Nullable<int> category)
        {
            var chairPersonParameter = chairPerson.HasValue ?
                new ObjectParameter("ChairPerson", chairPerson) :
                new ObjectParameter("ChairPerson", typeof(int));
    
            var participantParameter = participant.HasValue ?
                new ObjectParameter("Participant", participant) :
                new ObjectParameter("Participant", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("SDate", sDate) :
                new ObjectParameter("SDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("EDate", eDate) :
                new ObjectParameter("EDate", typeof(System.DateTime));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var isNotClosedParameter = isNotClosed.HasValue ?
                new ObjectParameter("IsNotClosed", isNotClosed) :
                new ObjectParameter("IsNotClosed", typeof(bool));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getmeetingdetailsNew_Result>("getmeetingdetailsNew", chairPersonParameter, participantParameter, statusParameter, sDateParameter, eDateParameter, priorityParameter, isNotClosedParameter, categoryParameter);
        }
    
        public virtual ObjectResult<getmeetingsummarydetailsNew_Result> getmeetingsummarydetailsNew(Nullable<int> chairPerson, Nullable<int> participant, Nullable<int> status, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, string priority, Nullable<bool> isNotClosed, Nullable<int> templateID)
        {
            var chairPersonParameter = chairPerson.HasValue ?
                new ObjectParameter("ChairPerson", chairPerson) :
                new ObjectParameter("ChairPerson", typeof(int));
    
            var participantParameter = participant.HasValue ?
                new ObjectParameter("Participant", participant) :
                new ObjectParameter("Participant", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("SDate", sDate) :
                new ObjectParameter("SDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("EDate", eDate) :
                new ObjectParameter("EDate", typeof(System.DateTime));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var isNotClosedParameter = isNotClosed.HasValue ?
                new ObjectParameter("IsNotClosed", isNotClosed) :
                new ObjectParameter("IsNotClosed", typeof(bool));
    
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getmeetingsummarydetailsNew_Result>("getmeetingsummarydetailsNew", chairPersonParameter, participantParameter, statusParameter, sDateParameter, eDateParameter, priorityParameter, isNotClosedParameter, templateIDParameter);
        }
    
        public virtual ObjectResult<GetTaskComments_Result> GetTaskComments(Nullable<int> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTaskComments_Result>("GetTaskComments", taskIdParameter);
        }
    
        public virtual ObjectResult<Proc_Get_meeting_status_Result> Proc_Get_meeting_status(Nullable<int> employee_id, Nullable<int> meeting_Id)
        {
            var employee_idParameter = employee_id.HasValue ?
                new ObjectParameter("Employee_id", employee_id) :
                new ObjectParameter("Employee_id", typeof(int));
    
            var meeting_IdParameter = meeting_Id.HasValue ?
                new ObjectParameter("Meeting_Id", meeting_Id) :
                new ObjectParameter("Meeting_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_Get_meeting_status_Result>("Proc_Get_meeting_status", employee_idParameter, meeting_IdParameter);
        }
    
        public virtual ObjectResult<Proc_Get_Review_Tasks_Result> Proc_Get_Review_Tasks(Nullable<int> chairperson, Nullable<int> category_id, Nullable<int> participant, string priorityType, string reviewFrequency)
        {
            var chairpersonParameter = chairperson.HasValue ?
                new ObjectParameter("Chairperson", chairperson) :
                new ObjectParameter("Chairperson", typeof(int));
    
            var category_idParameter = category_id.HasValue ?
                new ObjectParameter("Category_id", category_id) :
                new ObjectParameter("Category_id", typeof(int));
    
            var participantParameter = participant.HasValue ?
                new ObjectParameter("Participant", participant) :
                new ObjectParameter("Participant", typeof(int));
    
            var priorityTypeParameter = priorityType != null ?
                new ObjectParameter("PriorityType", priorityType) :
                new ObjectParameter("PriorityType", typeof(string));
    
            var reviewFrequencyParameter = reviewFrequency != null ?
                new ObjectParameter("ReviewFrequency", reviewFrequency) :
                new ObjectParameter("ReviewFrequency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_Get_Review_Tasks_Result>("Proc_Get_Review_Tasks", chairpersonParameter, category_idParameter, participantParameter, priorityTypeParameter, reviewFrequencyParameter);
        }
    
        public virtual ObjectResult<Proc_MyTask_Result> Proc_MyTask(Nullable<int> participant, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> category, Nullable<int> reviewFrequency)
        {
            var participantParameter = participant.HasValue ?
                new ObjectParameter("Participant", participant) :
                new ObjectParameter("Participant", typeof(int));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("SDate", sDate) :
                new ObjectParameter("SDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("EDate", eDate) :
                new ObjectParameter("EDate", typeof(System.DateTime));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var reviewFrequencyParameter = reviewFrequency.HasValue ?
                new ObjectParameter("ReviewFrequency", reviewFrequency) :
                new ObjectParameter("ReviewFrequency", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_MyTask_Result>("Proc_MyTask", participantParameter, sDateParameter, eDateParameter, categoryParameter, reviewFrequencyParameter);
        }
    
        public virtual ObjectResult<sp_add_Employee_Department_Result> sp_add_Employee_Department(Nullable<int> employee_code, string user_name, Nullable<int> department_id, string emailid)
        {
            var employee_codeParameter = employee_code.HasValue ?
                new ObjectParameter("employee_code", employee_code) :
                new ObjectParameter("employee_code", typeof(int));
    
            var user_nameParameter = user_name != null ?
                new ObjectParameter("user_name", user_name) :
                new ObjectParameter("user_name", typeof(string));
    
            var department_idParameter = department_id.HasValue ?
                new ObjectParameter("department_id", department_id) :
                new ObjectParameter("department_id", typeof(int));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("emailid", emailid) :
                new ObjectParameter("emailid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_add_Employee_Department_Result>("sp_add_Employee_Department", employee_codeParameter, user_nameParameter, department_idParameter, emailidParameter);
        }
    
        public virtual int sp_add_mms_notifications(Nullable<int> meeting_id, Nullable<int> chairperson)
        {
            var meeting_idParameter = meeting_id.HasValue ?
                new ObjectParameter("meeting_id", meeting_id) :
                new ObjectParameter("meeting_id", typeof(int));
    
            var chairpersonParameter = chairperson.HasValue ?
                new ObjectParameter("chairperson", chairperson) :
                new ObjectParameter("chairperson", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_add_mms_notifications", meeting_idParameter, chairpersonParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Check_Login_Details(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Check_Login_Details", usernameParameter, passwordParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<string> sp_get_EmailId(Nullable<int> particpanId_In)
        {
            var particpanId_InParameter = particpanId_In.HasValue ?
                new ObjectParameter("ParticpanId_In", particpanId_In) :
                new ObjectParameter("ParticpanId_In", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_get_EmailId", particpanId_InParameter);
        }
    
        public virtual ObjectResult<sp_Get_Employee_By_Email_Result> sp_Get_Employee_By_Email(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_Employee_By_Email_Result>("sp_Get_Employee_By_Email", emailParameter);
        }
    
        public virtual ObjectResult<sp_get_Employee_Department_Result> sp_get_Employee_Department()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_Employee_Department_Result>("sp_get_Employee_Department");
        }
    
        public virtual ObjectResult<sp_get_EmployeeMaster_forJSON_Result> sp_get_EmployeeMaster_forJSON(string dept)
        {
            var deptParameter = dept != null ?
                new ObjectParameter("dept", dept) :
                new ObjectParameter("dept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_EmployeeMaster_forJSON_Result>("sp_get_EmployeeMaster_forJSON", deptParameter);
        }
    
        public virtual ObjectResult<sp_get_meeting_details_Result> sp_get_meeting_details(Nullable<int> meeting_Id)
        {
            var meeting_IdParameter = meeting_Id.HasValue ?
                new ObjectParameter("Meeting_Id", meeting_Id) :
                new ObjectParameter("Meeting_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_meeting_details_Result>("sp_get_meeting_details", meeting_IdParameter);
        }
    
        public virtual ObjectResult<sp_get_meeting_details_Advanced_Result> sp_get_meeting_details_Advanced(Nullable<int> meeting_Id, string priority, Nullable<int> status)
        {
            var meeting_IdParameter = meeting_Id.HasValue ?
                new ObjectParameter("Meeting_Id", meeting_Id) :
                new ObjectParameter("Meeting_Id", typeof(int));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_meeting_details_Advanced_Result>("sp_get_meeting_details_Advanced", meeting_IdParameter, priorityParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_get_meeting_id()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_get_meeting_id");
        }
    
        public virtual ObjectResult<sp_get_meeting_master_viewByDept_Result> sp_get_meeting_master_viewByDept(Nullable<int> chairperson, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string department)
        {
            var chairpersonParameter = chairperson.HasValue ?
                new ObjectParameter("Chairperson", chairperson) :
                new ObjectParameter("Chairperson", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var departmentParameter = department != null ?
                new ObjectParameter("department", department) :
                new ObjectParameter("department", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_meeting_master_viewByDept_Result>("sp_get_meeting_master_viewByDept", chairpersonParameter, fromDateParameter, toDateParameter, departmentParameter);
        }
    
        public virtual ObjectResult<sp_get_MeetingSearch_Summary_01102019_Result> sp_get_MeetingSearch_Summary_01102019(Nullable<int> chairperson, Nullable<int> participant, Nullable<int> status, Nullable<System.DateTime> sdate, Nullable<System.DateTime> edate, string priority, Nullable<int> template)
        {
            var chairpersonParameter = chairperson.HasValue ?
                new ObjectParameter("chairperson", chairperson) :
                new ObjectParameter("chairperson", typeof(int));
    
            var participantParameter = participant.HasValue ?
                new ObjectParameter("participant", participant) :
                new ObjectParameter("participant", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var sdateParameter = sdate.HasValue ?
                new ObjectParameter("sdate", sdate) :
                new ObjectParameter("sdate", typeof(System.DateTime));
    
            var edateParameter = edate.HasValue ?
                new ObjectParameter("edate", edate) :
                new ObjectParameter("edate", typeof(System.DateTime));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(string));
    
            var templateParameter = template.HasValue ?
                new ObjectParameter("template", template) :
                new ObjectParameter("template", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_MeetingSearch_Summary_01102019_Result>("sp_get_MeetingSearch_Summary_01102019", chairpersonParameter, participantParameter, statusParameter, sdateParameter, edateParameter, priorityParameter, templateParameter);
        }
    
        public virtual ObjectResult<sp_get_MeetingSearch_Summary_13072018_Result> sp_get_MeetingSearch_Summary_13072018(Nullable<int> chairperson, Nullable<int> participant, Nullable<int> status, Nullable<System.DateTime> sdate, Nullable<System.DateTime> edate, string priority, Nullable<int> category)
        {
            var chairpersonParameter = chairperson.HasValue ?
                new ObjectParameter("chairperson", chairperson) :
                new ObjectParameter("chairperson", typeof(int));
    
            var participantParameter = participant.HasValue ?
                new ObjectParameter("participant", participant) :
                new ObjectParameter("participant", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var sdateParameter = sdate.HasValue ?
                new ObjectParameter("sdate", sdate) :
                new ObjectParameter("sdate", typeof(System.DateTime));
    
            var edateParameter = edate.HasValue ?
                new ObjectParameter("edate", edate) :
                new ObjectParameter("edate", typeof(System.DateTime));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_MeetingSearch_Summary_13072018_Result>("sp_get_MeetingSearch_Summary_13072018", chairpersonParameter, participantParameter, statusParameter, sdateParameter, edateParameter, priorityParameter, categoryParameter);
        }
    
        public virtual ObjectResult<sp_get_mms_notification_Result> sp_get_mms_notification(Nullable<int> chairperson)
        {
            var chairpersonParameter = chairperson.HasValue ?
                new ObjectParameter("chairperson", chairperson) :
                new ObjectParameter("chairperson", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_mms_notification_Result>("sp_get_mms_notification", chairpersonParameter);
        }
    
        public virtual ObjectResult<sp_get_notification_summary_Result> sp_get_notification_summary(Nullable<int> chairPerson, Nullable<int> participant, Nullable<int> status, string priority, Nullable<int> meetingId)
        {
            var chairPersonParameter = chairPerson.HasValue ?
                new ObjectParameter("ChairPerson", chairPerson) :
                new ObjectParameter("ChairPerson", typeof(int));
    
            var participantParameter = participant.HasValue ?
                new ObjectParameter("Participant", participant) :
                new ObjectParameter("Participant", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var meetingIdParameter = meetingId.HasValue ?
                new ObjectParameter("MeetingId", meetingId) :
                new ObjectParameter("MeetingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_notification_summary_Result>("sp_get_notification_summary", chairPersonParameter, participantParameter, statusParameter, priorityParameter, meetingIdParameter);
        }
    
        public virtual ObjectResult<sp_get_OverdueDetail_Result> sp_get_OverdueDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_OverdueDetail_Result>("sp_get_OverdueDetail");
        }
    
        public virtual ObjectResult<sp_get_Participants_Result> sp_get_Participants(Nullable<int> chairperson)
        {
            var chairpersonParameter = chairperson.HasValue ?
                new ObjectParameter("Chairperson", chairperson) :
                new ObjectParameter("Chairperson", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_Participants_Result>("sp_get_Participants", chairpersonParameter);
        }
    
        public virtual ObjectResult<sp_getCompletionEffectivenessReport_Result> sp_getCompletionEffectivenessReport(Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> chairPerson, Nullable<int> participant, Nullable<int> task_Id, Nullable<int> reviewFrequencyID)
        {
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("SDate", sDate) :
                new ObjectParameter("SDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("EDate", eDate) :
                new ObjectParameter("EDate", typeof(System.DateTime));
    
            var chairPersonParameter = chairPerson.HasValue ?
                new ObjectParameter("ChairPerson", chairPerson) :
                new ObjectParameter("ChairPerson", typeof(int));
    
            var participantParameter = participant.HasValue ?
                new ObjectParameter("Participant", participant) :
                new ObjectParameter("Participant", typeof(int));
    
            var task_IdParameter = task_Id.HasValue ?
                new ObjectParameter("Task_Id", task_Id) :
                new ObjectParameter("Task_Id", typeof(int));
    
            var reviewFrequencyIDParameter = reviewFrequencyID.HasValue ?
                new ObjectParameter("ReviewFrequencyID", reviewFrequencyID) :
                new ObjectParameter("ReviewFrequencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getCompletionEffectivenessReport_Result>("sp_getCompletionEffectivenessReport", sDateParameter, eDateParameter, chairPersonParameter, participantParameter, task_IdParameter, reviewFrequencyIDParameter);
        }
    
        public virtual ObjectResult<sp_getCompReport_2442018_Result> sp_getCompReport_2442018(Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> chairPerson, Nullable<int> participant)
        {
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("SDate", sDate) :
                new ObjectParameter("SDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("EDate", eDate) :
                new ObjectParameter("EDate", typeof(System.DateTime));
    
            var chairPersonParameter = chairPerson.HasValue ?
                new ObjectParameter("ChairPerson", chairPerson) :
                new ObjectParameter("ChairPerson", typeof(int));
    
            var participantParameter = participant.HasValue ?
                new ObjectParameter("Participant", participant) :
                new ObjectParameter("Participant", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getCompReport_2442018_Result>("sp_getCompReport_2442018", sDateParameter, eDateParameter, chairPersonParameter, participantParameter);
        }
    
        public virtual ObjectResult<string> sp_getname_EmployeeMaster(string user)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_getname_EmployeeMaster", userParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_insert_Attachment(Nullable<int> mid, string fname, string fextension, byte[] file)
        {
            var midParameter = mid.HasValue ?
                new ObjectParameter("Mid", mid) :
                new ObjectParameter("Mid", typeof(int));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var fextensionParameter = fextension != null ?
                new ObjectParameter("Fextension", fextension) :
                new ObjectParameter("Fextension", typeof(string));
    
            var fileParameter = file != null ?
                new ObjectParameter("File", file) :
                new ObjectParameter("File", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_Attachment", midParameter, fnameParameter, fextensionParameter, fileParameter);
        }
    
        public virtual int sp_insert_EmployeeAttachments(Nullable<int> mid, string fname, string fextension, byte[] file, Nullable<bool> isActive)
        {
            var midParameter = mid.HasValue ?
                new ObjectParameter("Mid", mid) :
                new ObjectParameter("Mid", typeof(int));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var fextensionParameter = fextension != null ?
                new ObjectParameter("Fextension", fextension) :
                new ObjectParameter("Fextension", typeof(string));
    
            var fileParameter = file != null ?
                new ObjectParameter("File", file) :
                new ObjectParameter("File", typeof(byte[]));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_EmployeeAttachments", midParameter, fnameParameter, fextensionParameter, fileParameter, isActiveParameter);
        }
    
        public virtual int sp_insert_EmployeeMaster(Nullable<int> companyICode, Nullable<int> departmentICode, Nullable<int> designationICode, string employeeNumber, string employeeFirstName, string employeeLastName, string employeeDisplayName, string employeeCurrentAddress1, string employeeCurrentAddress2, string employeeCurrentCity, string employeeCurrentState, string employeeCurrentCountry, string employeeCurrentPinCode, string employeeCurrentPhoneNo, Nullable<bool> isSameAsCurrentAddress, string employeePermanentAddress1, string employeePermanentAddress2, string employeePermanentCity, string employeePermanentState, string employeePermanentCountry, string employeePermanentPinCode, string employeePermanentPhoneNo, string employeeMobileNo, string employeeFatherName, Nullable<System.DateTime> employeeDateofBirth, string employeePersonalEmailId, Nullable<System.DateTime> employeeDateOfJoining, string employeeCorporateEmailId, string employeeIM, string loginUserName, string loginPassword, Nullable<int> employeeBloodGroupId, string employeePANNo, string employeePFNo, string employeeESINo, string employeeBankName, string employeeBankAccountNo, Nullable<bool> employeeMaritalStatus, string employeePrimarySkill, string employeePreviousEmployer, Nullable<int> employeePreviousExperienceYears, Nullable<int> employeePreviousExperienceMonths, string employeeReference1Remarks, string employeeReference2Remarks, byte[] employeeBioData, string documentExtension, byte[] employeePhoto, string photoExtension, Nullable<System.DateTime> employeeDateofLeaving, string employeeReasonforLeaving, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> swipeICode, string location, Nullable<int> groupid, Nullable<int> shiftid, string originalname, Nullable<bool> pseudo, Nullable<int> currenttechnology, byte[] picture, Nullable<int> primaryskillstreamid, string empphoto, Nullable<bool> nightshift)
        {
            var companyICodeParameter = companyICode.HasValue ?
                new ObjectParameter("CompanyICode", companyICode) :
                new ObjectParameter("CompanyICode", typeof(int));
    
            var departmentICodeParameter = departmentICode.HasValue ?
                new ObjectParameter("DepartmentICode", departmentICode) :
                new ObjectParameter("DepartmentICode", typeof(int));
    
            var designationICodeParameter = designationICode.HasValue ?
                new ObjectParameter("DesignationICode", designationICode) :
                new ObjectParameter("DesignationICode", typeof(int));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var employeeFirstNameParameter = employeeFirstName != null ?
                new ObjectParameter("EmployeeFirstName", employeeFirstName) :
                new ObjectParameter("EmployeeFirstName", typeof(string));
    
            var employeeLastNameParameter = employeeLastName != null ?
                new ObjectParameter("EmployeeLastName", employeeLastName) :
                new ObjectParameter("EmployeeLastName", typeof(string));
    
            var employeeDisplayNameParameter = employeeDisplayName != null ?
                new ObjectParameter("EmployeeDisplayName", employeeDisplayName) :
                new ObjectParameter("EmployeeDisplayName", typeof(string));
    
            var employeeCurrentAddress1Parameter = employeeCurrentAddress1 != null ?
                new ObjectParameter("EmployeeCurrentAddress1", employeeCurrentAddress1) :
                new ObjectParameter("EmployeeCurrentAddress1", typeof(string));
    
            var employeeCurrentAddress2Parameter = employeeCurrentAddress2 != null ?
                new ObjectParameter("EmployeeCurrentAddress2", employeeCurrentAddress2) :
                new ObjectParameter("EmployeeCurrentAddress2", typeof(string));
    
            var employeeCurrentCityParameter = employeeCurrentCity != null ?
                new ObjectParameter("EmployeeCurrentCity", employeeCurrentCity) :
                new ObjectParameter("EmployeeCurrentCity", typeof(string));
    
            var employeeCurrentStateParameter = employeeCurrentState != null ?
                new ObjectParameter("EmployeeCurrentState", employeeCurrentState) :
                new ObjectParameter("EmployeeCurrentState", typeof(string));
    
            var employeeCurrentCountryParameter = employeeCurrentCountry != null ?
                new ObjectParameter("EmployeeCurrentCountry", employeeCurrentCountry) :
                new ObjectParameter("EmployeeCurrentCountry", typeof(string));
    
            var employeeCurrentPinCodeParameter = employeeCurrentPinCode != null ?
                new ObjectParameter("EmployeeCurrentPinCode", employeeCurrentPinCode) :
                new ObjectParameter("EmployeeCurrentPinCode", typeof(string));
    
            var employeeCurrentPhoneNoParameter = employeeCurrentPhoneNo != null ?
                new ObjectParameter("EmployeeCurrentPhoneNo", employeeCurrentPhoneNo) :
                new ObjectParameter("EmployeeCurrentPhoneNo", typeof(string));
    
            var isSameAsCurrentAddressParameter = isSameAsCurrentAddress.HasValue ?
                new ObjectParameter("IsSameAsCurrentAddress", isSameAsCurrentAddress) :
                new ObjectParameter("IsSameAsCurrentAddress", typeof(bool));
    
            var employeePermanentAddress1Parameter = employeePermanentAddress1 != null ?
                new ObjectParameter("EmployeePermanentAddress1", employeePermanentAddress1) :
                new ObjectParameter("EmployeePermanentAddress1", typeof(string));
    
            var employeePermanentAddress2Parameter = employeePermanentAddress2 != null ?
                new ObjectParameter("EmployeePermanentAddress2", employeePermanentAddress2) :
                new ObjectParameter("EmployeePermanentAddress2", typeof(string));
    
            var employeePermanentCityParameter = employeePermanentCity != null ?
                new ObjectParameter("EmployeePermanentCity", employeePermanentCity) :
                new ObjectParameter("EmployeePermanentCity", typeof(string));
    
            var employeePermanentStateParameter = employeePermanentState != null ?
                new ObjectParameter("EmployeePermanentState", employeePermanentState) :
                new ObjectParameter("EmployeePermanentState", typeof(string));
    
            var employeePermanentCountryParameter = employeePermanentCountry != null ?
                new ObjectParameter("EmployeePermanentCountry", employeePermanentCountry) :
                new ObjectParameter("EmployeePermanentCountry", typeof(string));
    
            var employeePermanentPinCodeParameter = employeePermanentPinCode != null ?
                new ObjectParameter("EmployeePermanentPinCode", employeePermanentPinCode) :
                new ObjectParameter("EmployeePermanentPinCode", typeof(string));
    
            var employeePermanentPhoneNoParameter = employeePermanentPhoneNo != null ?
                new ObjectParameter("EmployeePermanentPhoneNo", employeePermanentPhoneNo) :
                new ObjectParameter("EmployeePermanentPhoneNo", typeof(string));
    
            var employeeMobileNoParameter = employeeMobileNo != null ?
                new ObjectParameter("EmployeeMobileNo", employeeMobileNo) :
                new ObjectParameter("EmployeeMobileNo", typeof(string));
    
            var employeeFatherNameParameter = employeeFatherName != null ?
                new ObjectParameter("EmployeeFatherName", employeeFatherName) :
                new ObjectParameter("EmployeeFatherName", typeof(string));
    
            var employeeDateofBirthParameter = employeeDateofBirth.HasValue ?
                new ObjectParameter("EmployeeDateofBirth", employeeDateofBirth) :
                new ObjectParameter("EmployeeDateofBirth", typeof(System.DateTime));
    
            var employeePersonalEmailIdParameter = employeePersonalEmailId != null ?
                new ObjectParameter("EmployeePersonalEmailId", employeePersonalEmailId) :
                new ObjectParameter("EmployeePersonalEmailId", typeof(string));
    
            var employeeDateOfJoiningParameter = employeeDateOfJoining.HasValue ?
                new ObjectParameter("EmployeeDateOfJoining", employeeDateOfJoining) :
                new ObjectParameter("EmployeeDateOfJoining", typeof(System.DateTime));
    
            var employeeCorporateEmailIdParameter = employeeCorporateEmailId != null ?
                new ObjectParameter("EmployeeCorporateEmailId", employeeCorporateEmailId) :
                new ObjectParameter("EmployeeCorporateEmailId", typeof(string));
    
            var employeeIMParameter = employeeIM != null ?
                new ObjectParameter("EmployeeIM", employeeIM) :
                new ObjectParameter("EmployeeIM", typeof(string));
    
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            var loginPasswordParameter = loginPassword != null ?
                new ObjectParameter("LoginPassword", loginPassword) :
                new ObjectParameter("LoginPassword", typeof(string));
    
            var employeeBloodGroupIdParameter = employeeBloodGroupId.HasValue ?
                new ObjectParameter("EmployeeBloodGroupId", employeeBloodGroupId) :
                new ObjectParameter("EmployeeBloodGroupId", typeof(int));
    
            var employeePANNoParameter = employeePANNo != null ?
                new ObjectParameter("EmployeePANNo", employeePANNo) :
                new ObjectParameter("EmployeePANNo", typeof(string));
    
            var employeePFNoParameter = employeePFNo != null ?
                new ObjectParameter("EmployeePFNo", employeePFNo) :
                new ObjectParameter("EmployeePFNo", typeof(string));
    
            var employeeESINoParameter = employeeESINo != null ?
                new ObjectParameter("EmployeeESINo", employeeESINo) :
                new ObjectParameter("EmployeeESINo", typeof(string));
    
            var employeeBankNameParameter = employeeBankName != null ?
                new ObjectParameter("EmployeeBankName", employeeBankName) :
                new ObjectParameter("EmployeeBankName", typeof(string));
    
            var employeeBankAccountNoParameter = employeeBankAccountNo != null ?
                new ObjectParameter("EmployeeBankAccountNo", employeeBankAccountNo) :
                new ObjectParameter("EmployeeBankAccountNo", typeof(string));
    
            var employeeMaritalStatusParameter = employeeMaritalStatus.HasValue ?
                new ObjectParameter("EmployeeMaritalStatus", employeeMaritalStatus) :
                new ObjectParameter("EmployeeMaritalStatus", typeof(bool));
    
            var employeePrimarySkillParameter = employeePrimarySkill != null ?
                new ObjectParameter("EmployeePrimarySkill", employeePrimarySkill) :
                new ObjectParameter("EmployeePrimarySkill", typeof(string));
    
            var employeePreviousEmployerParameter = employeePreviousEmployer != null ?
                new ObjectParameter("EmployeePreviousEmployer", employeePreviousEmployer) :
                new ObjectParameter("EmployeePreviousEmployer", typeof(string));
    
            var employeePreviousExperienceYearsParameter = employeePreviousExperienceYears.HasValue ?
                new ObjectParameter("EmployeePreviousExperienceYears", employeePreviousExperienceYears) :
                new ObjectParameter("EmployeePreviousExperienceYears", typeof(int));
    
            var employeePreviousExperienceMonthsParameter = employeePreviousExperienceMonths.HasValue ?
                new ObjectParameter("EmployeePreviousExperienceMonths", employeePreviousExperienceMonths) :
                new ObjectParameter("EmployeePreviousExperienceMonths", typeof(int));
    
            var employeeReference1RemarksParameter = employeeReference1Remarks != null ?
                new ObjectParameter("EmployeeReference1Remarks", employeeReference1Remarks) :
                new ObjectParameter("EmployeeReference1Remarks", typeof(string));
    
            var employeeReference2RemarksParameter = employeeReference2Remarks != null ?
                new ObjectParameter("EmployeeReference2Remarks", employeeReference2Remarks) :
                new ObjectParameter("EmployeeReference2Remarks", typeof(string));
    
            var employeeBioDataParameter = employeeBioData != null ?
                new ObjectParameter("EmployeeBioData", employeeBioData) :
                new ObjectParameter("EmployeeBioData", typeof(byte[]));
    
            var documentExtensionParameter = documentExtension != null ?
                new ObjectParameter("DocumentExtension", documentExtension) :
                new ObjectParameter("DocumentExtension", typeof(string));
    
            var employeePhotoParameter = employeePhoto != null ?
                new ObjectParameter("EmployeePhoto", employeePhoto) :
                new ObjectParameter("EmployeePhoto", typeof(byte[]));
    
            var photoExtensionParameter = photoExtension != null ?
                new ObjectParameter("PhotoExtension", photoExtension) :
                new ObjectParameter("PhotoExtension", typeof(string));
    
            var employeeDateofLeavingParameter = employeeDateofLeaving.HasValue ?
                new ObjectParameter("EmployeeDateofLeaving", employeeDateofLeaving) :
                new ObjectParameter("EmployeeDateofLeaving", typeof(System.DateTime));
    
            var employeeReasonforLeavingParameter = employeeReasonforLeaving != null ?
                new ObjectParameter("EmployeeReasonforLeaving", employeeReasonforLeaving) :
                new ObjectParameter("EmployeeReasonforLeaving", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var swipeICodeParameter = swipeICode.HasValue ?
                new ObjectParameter("SwipeICode", swipeICode) :
                new ObjectParameter("SwipeICode", typeof(int));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var groupidParameter = groupid.HasValue ?
                new ObjectParameter("Groupid", groupid) :
                new ObjectParameter("Groupid", typeof(int));
    
            var shiftidParameter = shiftid.HasValue ?
                new ObjectParameter("shiftid", shiftid) :
                new ObjectParameter("shiftid", typeof(int));
    
            var originalnameParameter = originalname != null ?
                new ObjectParameter("originalname", originalname) :
                new ObjectParameter("originalname", typeof(string));
    
            var pseudoParameter = pseudo.HasValue ?
                new ObjectParameter("pseudo", pseudo) :
                new ObjectParameter("pseudo", typeof(bool));
    
            var currenttechnologyParameter = currenttechnology.HasValue ?
                new ObjectParameter("currenttechnology", currenttechnology) :
                new ObjectParameter("currenttechnology", typeof(int));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("picture", picture) :
                new ObjectParameter("picture", typeof(byte[]));
    
            var primaryskillstreamidParameter = primaryskillstreamid.HasValue ?
                new ObjectParameter("primaryskillstreamid", primaryskillstreamid) :
                new ObjectParameter("primaryskillstreamid", typeof(int));
    
            var empphotoParameter = empphoto != null ?
                new ObjectParameter("empphoto", empphoto) :
                new ObjectParameter("empphoto", typeof(string));
    
            var nightshiftParameter = nightshift.HasValue ?
                new ObjectParameter("nightshift", nightshift) :
                new ObjectParameter("nightshift", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_EmployeeMaster", companyICodeParameter, departmentICodeParameter, designationICodeParameter, employeeNumberParameter, employeeFirstNameParameter, employeeLastNameParameter, employeeDisplayNameParameter, employeeCurrentAddress1Parameter, employeeCurrentAddress2Parameter, employeeCurrentCityParameter, employeeCurrentStateParameter, employeeCurrentCountryParameter, employeeCurrentPinCodeParameter, employeeCurrentPhoneNoParameter, isSameAsCurrentAddressParameter, employeePermanentAddress1Parameter, employeePermanentAddress2Parameter, employeePermanentCityParameter, employeePermanentStateParameter, employeePermanentCountryParameter, employeePermanentPinCodeParameter, employeePermanentPhoneNoParameter, employeeMobileNoParameter, employeeFatherNameParameter, employeeDateofBirthParameter, employeePersonalEmailIdParameter, employeeDateOfJoiningParameter, employeeCorporateEmailIdParameter, employeeIMParameter, loginUserNameParameter, loginPasswordParameter, employeeBloodGroupIdParameter, employeePANNoParameter, employeePFNoParameter, employeeESINoParameter, employeeBankNameParameter, employeeBankAccountNoParameter, employeeMaritalStatusParameter, employeePrimarySkillParameter, employeePreviousEmployerParameter, employeePreviousExperienceYearsParameter, employeePreviousExperienceMonthsParameter, employeeReference1RemarksParameter, employeeReference2RemarksParameter, employeeBioDataParameter, documentExtensionParameter, employeePhotoParameter, photoExtensionParameter, employeeDateofLeavingParameter, employeeReasonforLeavingParameter, isActiveParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, swipeICodeParameter, locationParameter, groupidParameter, shiftidParameter, originalnameParameter, pseudoParameter, currenttechnologyParameter, pictureParameter, primaryskillstreamidParameter, empphotoParameter, nightshiftParameter);
        }
    
        public virtual int sp_insert_Meeting_Participant(Nullable<int> meetingId_In, Nullable<int> participantId_In, string participantName_In)
        {
            var meetingId_InParameter = meetingId_In.HasValue ?
                new ObjectParameter("MeetingId_In", meetingId_In) :
                new ObjectParameter("MeetingId_In", typeof(int));
    
            var participantId_InParameter = participantId_In.HasValue ?
                new ObjectParameter("ParticipantId_In", participantId_In) :
                new ObjectParameter("ParticipantId_In", typeof(int));
    
            var participantName_InParameter = participantName_In != null ?
                new ObjectParameter("ParticipantName_In", participantName_In) :
                new ObjectParameter("ParticipantName_In", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_Meeting_Participant", meetingId_InParameter, participantId_InParameter, participantName_InParameter);
        }
    
        public virtual int sp_insert_Meeting_Status(Nullable<int> empId_In, string status_Task_In, Nullable<int> status_ResponsiblePerson_In, Nullable<System.DateTime> status_Date_In, string status_Comments_In, Nullable<int> meeting_status_In, string meeting_Status_Hours, Nullable<int> meeting_Id, Nullable<int> commented_By, Nullable<int> commented_By_ID, Nullable<int> task_Id)
        {
            var empId_InParameter = empId_In.HasValue ?
                new ObjectParameter("EmpId_In", empId_In) :
                new ObjectParameter("EmpId_In", typeof(int));
    
            var status_Task_InParameter = status_Task_In != null ?
                new ObjectParameter("Status_Task_In", status_Task_In) :
                new ObjectParameter("Status_Task_In", typeof(string));
    
            var status_ResponsiblePerson_InParameter = status_ResponsiblePerson_In.HasValue ?
                new ObjectParameter("Status_ResponsiblePerson_In", status_ResponsiblePerson_In) :
                new ObjectParameter("Status_ResponsiblePerson_In", typeof(int));
    
            var status_Date_InParameter = status_Date_In.HasValue ?
                new ObjectParameter("Status_Date_In", status_Date_In) :
                new ObjectParameter("Status_Date_In", typeof(System.DateTime));
    
            var status_Comments_InParameter = status_Comments_In != null ?
                new ObjectParameter("Status_Comments_In", status_Comments_In) :
                new ObjectParameter("Status_Comments_In", typeof(string));
    
            var meeting_status_InParameter = meeting_status_In.HasValue ?
                new ObjectParameter("Meeting_status_In", meeting_status_In) :
                new ObjectParameter("Meeting_status_In", typeof(int));
    
            var meeting_Status_HoursParameter = meeting_Status_Hours != null ?
                new ObjectParameter("Meeting_Status_Hours", meeting_Status_Hours) :
                new ObjectParameter("Meeting_Status_Hours", typeof(string));
    
            var meeting_IdParameter = meeting_Id.HasValue ?
                new ObjectParameter("Meeting_Id", meeting_Id) :
                new ObjectParameter("Meeting_Id", typeof(int));
    
            var commented_ByParameter = commented_By.HasValue ?
                new ObjectParameter("Commented_By", commented_By) :
                new ObjectParameter("Commented_By", typeof(int));
    
            var commented_By_IDParameter = commented_By_ID.HasValue ?
                new ObjectParameter("Commented_By_ID", commented_By_ID) :
                new ObjectParameter("Commented_By_ID", typeof(int));
    
            var task_IdParameter = task_Id.HasValue ?
                new ObjectParameter("Task_Id", task_Id) :
                new ObjectParameter("Task_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_Meeting_Status", empId_InParameter, status_Task_InParameter, status_ResponsiblePerson_InParameter, status_Date_InParameter, status_Comments_InParameter, meeting_status_InParameter, meeting_Status_HoursParameter, meeting_IdParameter, commented_ByParameter, commented_By_IDParameter, task_IdParameter);
        }
    
        public virtual int sp_insert_meeting_status_24062014_1(Nullable<int> empId_In, string status_Task_In, string status_ResponsiblePerson_In, string status_Date_In, string status_Comments_In, Nullable<int> meeting_Status_In, string meeting_Status_Hours, Nullable<int> meeting_Id, Nullable<int> task_Id)
        {
            var empId_InParameter = empId_In.HasValue ?
                new ObjectParameter("EmpId_In", empId_In) :
                new ObjectParameter("EmpId_In", typeof(int));
    
            var status_Task_InParameter = status_Task_In != null ?
                new ObjectParameter("Status_Task_In", status_Task_In) :
                new ObjectParameter("Status_Task_In", typeof(string));
    
            var status_ResponsiblePerson_InParameter = status_ResponsiblePerson_In != null ?
                new ObjectParameter("Status_ResponsiblePerson_In", status_ResponsiblePerson_In) :
                new ObjectParameter("Status_ResponsiblePerson_In", typeof(string));
    
            var status_Date_InParameter = status_Date_In != null ?
                new ObjectParameter("Status_Date_In", status_Date_In) :
                new ObjectParameter("Status_Date_In", typeof(string));
    
            var status_Comments_InParameter = status_Comments_In != null ?
                new ObjectParameter("Status_Comments_In", status_Comments_In) :
                new ObjectParameter("Status_Comments_In", typeof(string));
    
            var meeting_Status_InParameter = meeting_Status_In.HasValue ?
                new ObjectParameter("Meeting_Status_In", meeting_Status_In) :
                new ObjectParameter("Meeting_Status_In", typeof(int));
    
            var meeting_Status_HoursParameter = meeting_Status_Hours != null ?
                new ObjectParameter("Meeting_Status_Hours", meeting_Status_Hours) :
                new ObjectParameter("Meeting_Status_Hours", typeof(string));
    
            var meeting_IdParameter = meeting_Id.HasValue ?
                new ObjectParameter("Meeting_Id", meeting_Id) :
                new ObjectParameter("Meeting_Id", typeof(int));
    
            var task_IdParameter = task_Id.HasValue ?
                new ObjectParameter("Task_Id", task_Id) :
                new ObjectParameter("Task_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_meeting_status_24062014_1", empId_InParameter, status_Task_InParameter, status_ResponsiblePerson_InParameter, status_Date_InParameter, status_Comments_InParameter, meeting_Status_InParameter, meeting_Status_HoursParameter, meeting_IdParameter, task_IdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_insert_MeetingDetails(Nullable<int> mid, Nullable<int> eid, Nullable<int> cperson, Nullable<int> participant, string task, Nullable<System.DateTime> ctime, string priority, string comments, string category, string isread, Nullable<bool> seen, Nullable<bool> istemplate, Nullable<System.DateTime> nextRevDt, string revfreq)
        {
            var midParameter = mid.HasValue ?
                new ObjectParameter("Mid", mid) :
                new ObjectParameter("Mid", typeof(int));
    
            var eidParameter = eid.HasValue ?
                new ObjectParameter("Eid", eid) :
                new ObjectParameter("Eid", typeof(int));
    
            var cpersonParameter = cperson.HasValue ?
                new ObjectParameter("Cperson", cperson) :
                new ObjectParameter("Cperson", typeof(int));
    
            var participantParameter = participant.HasValue ?
                new ObjectParameter("Participant", participant) :
                new ObjectParameter("Participant", typeof(int));
    
            var taskParameter = task != null ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(string));
    
            var ctimeParameter = ctime.HasValue ?
                new ObjectParameter("Ctime", ctime) :
                new ObjectParameter("Ctime", typeof(System.DateTime));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var isreadParameter = isread != null ?
                new ObjectParameter("Isread", isread) :
                new ObjectParameter("Isread", typeof(string));
    
            var seenParameter = seen.HasValue ?
                new ObjectParameter("seen", seen) :
                new ObjectParameter("seen", typeof(bool));
    
            var istemplateParameter = istemplate.HasValue ?
                new ObjectParameter("istemplate", istemplate) :
                new ObjectParameter("istemplate", typeof(bool));
    
            var nextRevDtParameter = nextRevDt.HasValue ?
                new ObjectParameter("NextRevDt", nextRevDt) :
                new ObjectParameter("NextRevDt", typeof(System.DateTime));
    
            var revfreqParameter = revfreq != null ?
                new ObjectParameter("Revfreq", revfreq) :
                new ObjectParameter("Revfreq", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_insert_MeetingDetails", midParameter, eidParameter, cpersonParameter, participantParameter, taskParameter, ctimeParameter, priorityParameter, commentsParameter, categoryParameter, isreadParameter, seenParameter, istemplateParameter, nextRevDtParameter, revfreqParameter);
        }
    
        public virtual int sp_insert_MeetingDetails1(Nullable<int> mid, Nullable<int> eid, Nullable<int> cperson, Nullable<int> participant, string task, Nullable<System.DateTime> ctime, string priority, Nullable<int> status, string comments, string category, string isread, Nullable<bool> seen, Nullable<bool> istemplate, Nullable<System.DateTime> nextRevDt, string revfreq, Nullable<int> templateID)
        {
            var midParameter = mid.HasValue ?
                new ObjectParameter("Mid", mid) :
                new ObjectParameter("Mid", typeof(int));
    
            var eidParameter = eid.HasValue ?
                new ObjectParameter("Eid", eid) :
                new ObjectParameter("Eid", typeof(int));
    
            var cpersonParameter = cperson.HasValue ?
                new ObjectParameter("Cperson", cperson) :
                new ObjectParameter("Cperson", typeof(int));
    
            var participantParameter = participant.HasValue ?
                new ObjectParameter("Participant", participant) :
                new ObjectParameter("Participant", typeof(int));
    
            var taskParameter = task != null ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(string));
    
            var ctimeParameter = ctime.HasValue ?
                new ObjectParameter("Ctime", ctime) :
                new ObjectParameter("Ctime", typeof(System.DateTime));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var isreadParameter = isread != null ?
                new ObjectParameter("Isread", isread) :
                new ObjectParameter("Isread", typeof(string));
    
            var seenParameter = seen.HasValue ?
                new ObjectParameter("seen", seen) :
                new ObjectParameter("seen", typeof(bool));
    
            var istemplateParameter = istemplate.HasValue ?
                new ObjectParameter("istemplate", istemplate) :
                new ObjectParameter("istemplate", typeof(bool));
    
            var nextRevDtParameter = nextRevDt.HasValue ?
                new ObjectParameter("NextRevDt", nextRevDt) :
                new ObjectParameter("NextRevDt", typeof(System.DateTime));
    
            var revfreqParameter = revfreq != null ?
                new ObjectParameter("Revfreq", revfreq) :
                new ObjectParameter("Revfreq", typeof(string));
    
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_MeetingDetails1", midParameter, eidParameter, cpersonParameter, participantParameter, taskParameter, ctimeParameter, priorityParameter, statusParameter, commentsParameter, categoryParameter, isreadParameter, seenParameter, istemplateParameter, nextRevDtParameter, revfreqParameter, templateIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_insert_MeetingMaster(string objective_In, Nullable<System.DateTime> date_In, string time_In, string venue_In, string type_In, string duration_In, string department_In, Nullable<int> chairperson_In, string minutes_Of_Meeting_In, Nullable<int> participants_In, Nullable<bool> istemplate, Nullable<int> templateID)
        {
            var objective_InParameter = objective_In != null ?
                new ObjectParameter("Objective_In", objective_In) :
                new ObjectParameter("Objective_In", typeof(string));
    
            var date_InParameter = date_In.HasValue ?
                new ObjectParameter("Date_In", date_In) :
                new ObjectParameter("Date_In", typeof(System.DateTime));
    
            var time_InParameter = time_In != null ?
                new ObjectParameter("Time_In", time_In) :
                new ObjectParameter("Time_In", typeof(string));
    
            var venue_InParameter = venue_In != null ?
                new ObjectParameter("Venue_In", venue_In) :
                new ObjectParameter("Venue_In", typeof(string));
    
            var type_InParameter = type_In != null ?
                new ObjectParameter("Type_In", type_In) :
                new ObjectParameter("Type_In", typeof(string));
    
            var duration_InParameter = duration_In != null ?
                new ObjectParameter("Duration_In", duration_In) :
                new ObjectParameter("Duration_In", typeof(string));
    
            var department_InParameter = department_In != null ?
                new ObjectParameter("Department_In", department_In) :
                new ObjectParameter("Department_In", typeof(string));
    
            var chairperson_InParameter = chairperson_In.HasValue ?
                new ObjectParameter("Chairperson_In", chairperson_In) :
                new ObjectParameter("Chairperson_In", typeof(int));
    
            var minutes_Of_Meeting_InParameter = minutes_Of_Meeting_In != null ?
                new ObjectParameter("Minutes_Of_Meeting_In", minutes_Of_Meeting_In) :
                new ObjectParameter("Minutes_Of_Meeting_In", typeof(string));
    
            var participants_InParameter = participants_In.HasValue ?
                new ObjectParameter("Participants_In", participants_In) :
                new ObjectParameter("Participants_In", typeof(int));
    
            var istemplateParameter = istemplate.HasValue ?
                new ObjectParameter("Istemplate", istemplate) :
                new ObjectParameter("Istemplate", typeof(bool));
    
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_insert_MeetingMaster", objective_InParameter, date_InParameter, time_InParameter, venue_InParameter, type_InParameter, duration_InParameter, department_InParameter, chairperson_InParameter, minutes_Of_Meeting_InParameter, participants_InParameter, istemplateParameter, templateIDParameter);
        }
    
        public virtual int sp_insert_status_update(Nullable<int> meetingId, Nullable<int> employeeId, string task, Nullable<int> status, Nullable<int> taskId)
        {
            var meetingIdParameter = meetingId.HasValue ?
                new ObjectParameter("MeetingId", meetingId) :
                new ObjectParameter("MeetingId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var taskParameter = task != null ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_status_update", meetingIdParameter, employeeIdParameter, taskParameter, statusParameter, taskIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_notification_count_message(Nullable<int> meeting_Id_In)
        {
            var meeting_Id_InParameter = meeting_Id_In.HasValue ?
                new ObjectParameter("Meeting_Id_In", meeting_Id_In) :
                new ObjectParameter("Meeting_Id_In", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_notification_count_message", meeting_Id_InParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_select_AttendedMeeting_Name_Result> sp_select_AttendedMeeting_Name(Nullable<int> employee_Id, Nullable<System.DateTime> startDate_In, Nullable<System.DateTime> endDate_In)
        {
            var employee_IdParameter = employee_Id.HasValue ?
                new ObjectParameter("Employee_Id", employee_Id) :
                new ObjectParameter("Employee_Id", typeof(int));
    
            var startDate_InParameter = startDate_In.HasValue ?
                new ObjectParameter("StartDate_In", startDate_In) :
                new ObjectParameter("StartDate_In", typeof(System.DateTime));
    
            var endDate_InParameter = endDate_In.HasValue ?
                new ObjectParameter("EndDate_In", endDate_In) :
                new ObjectParameter("EndDate_In", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_AttendedMeeting_Name_Result>("sp_select_AttendedMeeting_Name", employee_IdParameter, startDate_InParameter, endDate_InParameter);
        }
    
        public virtual ObjectResult<sp_select_Meeting_Id_Result> sp_select_Meeting_Id(Nullable<int> chairperson, Nullable<System.DateTime> startDate_In, Nullable<System.DateTime> endDate_In)
        {
            var chairpersonParameter = chairperson.HasValue ?
                new ObjectParameter("Chairperson", chairperson) :
                new ObjectParameter("Chairperson", typeof(int));
    
            var startDate_InParameter = startDate_In.HasValue ?
                new ObjectParameter("StartDate_In", startDate_In) :
                new ObjectParameter("StartDate_In", typeof(System.DateTime));
    
            var endDate_InParameter = endDate_In.HasValue ?
                new ObjectParameter("EndDate_In", endDate_In) :
                new ObjectParameter("EndDate_In", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_Meeting_Id_Result>("sp_select_Meeting_Id", chairpersonParameter, startDate_InParameter, endDate_InParameter);
        }
    
        public virtual ObjectResult<sp_select_Meeting_Name_Result> sp_select_Meeting_Name(Nullable<int> chairPerson, Nullable<System.DateTime> startDate_In, Nullable<System.DateTime> endDate_In, string priority, Nullable<int> status)
        {
            var chairPersonParameter = chairPerson.HasValue ?
                new ObjectParameter("ChairPerson", chairPerson) :
                new ObjectParameter("ChairPerson", typeof(int));
    
            var startDate_InParameter = startDate_In.HasValue ?
                new ObjectParameter("StartDate_In", startDate_In) :
                new ObjectParameter("StartDate_In", typeof(System.DateTime));
    
            var endDate_InParameter = endDate_In.HasValue ?
                new ObjectParameter("EndDate_In", endDate_In) :
                new ObjectParameter("EndDate_In", typeof(System.DateTime));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_Meeting_Name_Result>("sp_select_Meeting_Name", chairPersonParameter, startDate_InParameter, endDate_InParameter, priorityParameter, statusParameter);
        }
    
        public virtual ObjectResult<sp_select_Meeting_Participant_Result> sp_select_Meeting_Participant(Nullable<int> meetingId_In)
        {
            var meetingId_InParameter = meetingId_In.HasValue ?
                new ObjectParameter("MeetingId_In", meetingId_In) :
                new ObjectParameter("MeetingId_In", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_Meeting_Participant_Result>("sp_select_Meeting_Participant", meetingId_InParameter);
        }
    
        public virtual ObjectResult<sp_select_meeting_status_Result> sp_select_meeting_status(Nullable<int> status_Task_In)
        {
            var status_Task_InParameter = status_Task_In.HasValue ?
                new ObjectParameter("Status_Task_In", status_Task_In) :
                new ObjectParameter("Status_Task_In", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_meeting_status_Result>("sp_select_meeting_status", status_Task_InParameter);
        }
    
        public virtual ObjectResult<sp_select_mms_meeting_details_Result> sp_select_mms_meeting_details(Nullable<int> meeting_Id)
        {
            var meeting_IdParameter = meeting_Id.HasValue ?
                new ObjectParameter("Meeting_Id", meeting_Id) :
                new ObjectParameter("Meeting_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_mms_meeting_details_Result>("sp_select_mms_meeting_details", meeting_IdParameter);
        }
    
        public virtual ObjectResult<sp_select_mms_meeting_master_Result> sp_select_mms_meeting_master(Nullable<int> meeting_Id)
        {
            var meeting_IdParameter = meeting_Id.HasValue ?
                new ObjectParameter("Meeting_Id", meeting_Id) :
                new ObjectParameter("Meeting_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_mms_meeting_master_Result>("sp_select_mms_meeting_master", meeting_IdParameter);
        }
    
        public virtual int Sp_Update_Attachment(Nullable<int> meetingId, string fname, string fextension, byte[] file)
        {
            var meetingIdParameter = meetingId.HasValue ?
                new ObjectParameter("MeetingId", meetingId) :
                new ObjectParameter("MeetingId", typeof(int));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var fextensionParameter = fextension != null ?
                new ObjectParameter("Fextension", fextension) :
                new ObjectParameter("Fextension", typeof(string));
    
            var fileParameter = file != null ?
                new ObjectParameter("File", file) :
                new ObjectParameter("File", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Attachment", meetingIdParameter, fnameParameter, fextensionParameter, fileParameter);
        }
    
        public virtual int Sp_Update_EmployeeAttachments(Nullable<int> meetingId, string fname, string fextension, byte[] file, Nullable<bool> isActive)
        {
            var meetingIdParameter = meetingId.HasValue ?
                new ObjectParameter("MeetingId", meetingId) :
                new ObjectParameter("MeetingId", typeof(int));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var fextensionParameter = fextension != null ?
                new ObjectParameter("Fextension", fextension) :
                new ObjectParameter("Fextension", typeof(string));
    
            var fileParameter = file != null ?
                new ObjectParameter("File", file) :
                new ObjectParameter("File", typeof(byte[]));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_EmployeeAttachments", meetingIdParameter, fnameParameter, fextensionParameter, fileParameter, isActiveParameter);
        }
    
        public virtual int Sp_Update_EmployeeMaster(Nullable<int> employeeICode, Nullable<int> companyICode, Nullable<int> departmentICode, Nullable<int> designationICode, string employeeNumber, string employeeFirstName, string employeeLastName, string employeeDisplayName, string employeeCurrentAddress1, string employeeCurrentAddress2, string employeeCurrentCity, string employeeCurrentState, string employeeCurrentCountry, string employeeCurrentPinCode, string employeeCurrentPhoneNo, Nullable<bool> isSameAsCurrentAddress, string employeePermanentAddress1, string employeePermanentAddress2, string employeePermanentCity, string employeePermanentState, string employeePermanentCountry, string employeePermanentPinCode, string employeePermanentPhoneNo, string employeeMobileNo, string employeeFatherName, Nullable<System.DateTime> employeeDateofBirth, string employeePersonalEmailId, Nullable<System.DateTime> employeeDateOfJoining, string employeeCorporateEmailId, string employeeIM, string loginUserName, string loginPassword, Nullable<int> employeeBloodGroupId, string employeePANNo, string employeePFNo, string employeeESINo, string employeeBankName, string employeeBankAccountNo, Nullable<bool> employeeMaritalStatus, string employeePrimarySkill, string employeePreviousEmployer, Nullable<int> employeePreviousExperienceYears, Nullable<int> employeePreviousExperienceMonths, string employeeReference1Remarks, string employeeReference2Remarks, byte[] employeeBioData, string documentExtension, byte[] employeePhoto, string photoExtension, Nullable<System.DateTime> employeeDateofLeaving, string employeeReasonforLeaving, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> swipeICode, string location, Nullable<int> groupid, Nullable<int> shiftid, string originalname, Nullable<bool> pseudo, Nullable<int> currenttechnology, byte[] picture, Nullable<int> primaryskillstreamid, string empphoto, Nullable<bool> nightshift)
        {
            var employeeICodeParameter = employeeICode.HasValue ?
                new ObjectParameter("EmployeeICode", employeeICode) :
                new ObjectParameter("EmployeeICode", typeof(int));
    
            var companyICodeParameter = companyICode.HasValue ?
                new ObjectParameter("CompanyICode", companyICode) :
                new ObjectParameter("CompanyICode", typeof(int));
    
            var departmentICodeParameter = departmentICode.HasValue ?
                new ObjectParameter("DepartmentICode", departmentICode) :
                new ObjectParameter("DepartmentICode", typeof(int));
    
            var designationICodeParameter = designationICode.HasValue ?
                new ObjectParameter("DesignationICode", designationICode) :
                new ObjectParameter("DesignationICode", typeof(int));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var employeeFirstNameParameter = employeeFirstName != null ?
                new ObjectParameter("EmployeeFirstName", employeeFirstName) :
                new ObjectParameter("EmployeeFirstName", typeof(string));
    
            var employeeLastNameParameter = employeeLastName != null ?
                new ObjectParameter("EmployeeLastName", employeeLastName) :
                new ObjectParameter("EmployeeLastName", typeof(string));
    
            var employeeDisplayNameParameter = employeeDisplayName != null ?
                new ObjectParameter("EmployeeDisplayName", employeeDisplayName) :
                new ObjectParameter("EmployeeDisplayName", typeof(string));
    
            var employeeCurrentAddress1Parameter = employeeCurrentAddress1 != null ?
                new ObjectParameter("EmployeeCurrentAddress1", employeeCurrentAddress1) :
                new ObjectParameter("EmployeeCurrentAddress1", typeof(string));
    
            var employeeCurrentAddress2Parameter = employeeCurrentAddress2 != null ?
                new ObjectParameter("EmployeeCurrentAddress2", employeeCurrentAddress2) :
                new ObjectParameter("EmployeeCurrentAddress2", typeof(string));
    
            var employeeCurrentCityParameter = employeeCurrentCity != null ?
                new ObjectParameter("EmployeeCurrentCity", employeeCurrentCity) :
                new ObjectParameter("EmployeeCurrentCity", typeof(string));
    
            var employeeCurrentStateParameter = employeeCurrentState != null ?
                new ObjectParameter("EmployeeCurrentState", employeeCurrentState) :
                new ObjectParameter("EmployeeCurrentState", typeof(string));
    
            var employeeCurrentCountryParameter = employeeCurrentCountry != null ?
                new ObjectParameter("EmployeeCurrentCountry", employeeCurrentCountry) :
                new ObjectParameter("EmployeeCurrentCountry", typeof(string));
    
            var employeeCurrentPinCodeParameter = employeeCurrentPinCode != null ?
                new ObjectParameter("EmployeeCurrentPinCode", employeeCurrentPinCode) :
                new ObjectParameter("EmployeeCurrentPinCode", typeof(string));
    
            var employeeCurrentPhoneNoParameter = employeeCurrentPhoneNo != null ?
                new ObjectParameter("EmployeeCurrentPhoneNo", employeeCurrentPhoneNo) :
                new ObjectParameter("EmployeeCurrentPhoneNo", typeof(string));
    
            var isSameAsCurrentAddressParameter = isSameAsCurrentAddress.HasValue ?
                new ObjectParameter("IsSameAsCurrentAddress", isSameAsCurrentAddress) :
                new ObjectParameter("IsSameAsCurrentAddress", typeof(bool));
    
            var employeePermanentAddress1Parameter = employeePermanentAddress1 != null ?
                new ObjectParameter("EmployeePermanentAddress1", employeePermanentAddress1) :
                new ObjectParameter("EmployeePermanentAddress1", typeof(string));
    
            var employeePermanentAddress2Parameter = employeePermanentAddress2 != null ?
                new ObjectParameter("EmployeePermanentAddress2", employeePermanentAddress2) :
                new ObjectParameter("EmployeePermanentAddress2", typeof(string));
    
            var employeePermanentCityParameter = employeePermanentCity != null ?
                new ObjectParameter("EmployeePermanentCity", employeePermanentCity) :
                new ObjectParameter("EmployeePermanentCity", typeof(string));
    
            var employeePermanentStateParameter = employeePermanentState != null ?
                new ObjectParameter("EmployeePermanentState", employeePermanentState) :
                new ObjectParameter("EmployeePermanentState", typeof(string));
    
            var employeePermanentCountryParameter = employeePermanentCountry != null ?
                new ObjectParameter("EmployeePermanentCountry", employeePermanentCountry) :
                new ObjectParameter("EmployeePermanentCountry", typeof(string));
    
            var employeePermanentPinCodeParameter = employeePermanentPinCode != null ?
                new ObjectParameter("EmployeePermanentPinCode", employeePermanentPinCode) :
                new ObjectParameter("EmployeePermanentPinCode", typeof(string));
    
            var employeePermanentPhoneNoParameter = employeePermanentPhoneNo != null ?
                new ObjectParameter("EmployeePermanentPhoneNo", employeePermanentPhoneNo) :
                new ObjectParameter("EmployeePermanentPhoneNo", typeof(string));
    
            var employeeMobileNoParameter = employeeMobileNo != null ?
                new ObjectParameter("EmployeeMobileNo", employeeMobileNo) :
                new ObjectParameter("EmployeeMobileNo", typeof(string));
    
            var employeeFatherNameParameter = employeeFatherName != null ?
                new ObjectParameter("EmployeeFatherName", employeeFatherName) :
                new ObjectParameter("EmployeeFatherName", typeof(string));
    
            var employeeDateofBirthParameter = employeeDateofBirth.HasValue ?
                new ObjectParameter("EmployeeDateofBirth", employeeDateofBirth) :
                new ObjectParameter("EmployeeDateofBirth", typeof(System.DateTime));
    
            var employeePersonalEmailIdParameter = employeePersonalEmailId != null ?
                new ObjectParameter("EmployeePersonalEmailId", employeePersonalEmailId) :
                new ObjectParameter("EmployeePersonalEmailId", typeof(string));
    
            var employeeDateOfJoiningParameter = employeeDateOfJoining.HasValue ?
                new ObjectParameter("EmployeeDateOfJoining", employeeDateOfJoining) :
                new ObjectParameter("EmployeeDateOfJoining", typeof(System.DateTime));
    
            var employeeCorporateEmailIdParameter = employeeCorporateEmailId != null ?
                new ObjectParameter("EmployeeCorporateEmailId", employeeCorporateEmailId) :
                new ObjectParameter("EmployeeCorporateEmailId", typeof(string));
    
            var employeeIMParameter = employeeIM != null ?
                new ObjectParameter("EmployeeIM", employeeIM) :
                new ObjectParameter("EmployeeIM", typeof(string));
    
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            var loginPasswordParameter = loginPassword != null ?
                new ObjectParameter("LoginPassword", loginPassword) :
                new ObjectParameter("LoginPassword", typeof(string));
    
            var employeeBloodGroupIdParameter = employeeBloodGroupId.HasValue ?
                new ObjectParameter("EmployeeBloodGroupId", employeeBloodGroupId) :
                new ObjectParameter("EmployeeBloodGroupId", typeof(int));
    
            var employeePANNoParameter = employeePANNo != null ?
                new ObjectParameter("EmployeePANNo", employeePANNo) :
                new ObjectParameter("EmployeePANNo", typeof(string));
    
            var employeePFNoParameter = employeePFNo != null ?
                new ObjectParameter("EmployeePFNo", employeePFNo) :
                new ObjectParameter("EmployeePFNo", typeof(string));
    
            var employeeESINoParameter = employeeESINo != null ?
                new ObjectParameter("EmployeeESINo", employeeESINo) :
                new ObjectParameter("EmployeeESINo", typeof(string));
    
            var employeeBankNameParameter = employeeBankName != null ?
                new ObjectParameter("EmployeeBankName", employeeBankName) :
                new ObjectParameter("EmployeeBankName", typeof(string));
    
            var employeeBankAccountNoParameter = employeeBankAccountNo != null ?
                new ObjectParameter("EmployeeBankAccountNo", employeeBankAccountNo) :
                new ObjectParameter("EmployeeBankAccountNo", typeof(string));
    
            var employeeMaritalStatusParameter = employeeMaritalStatus.HasValue ?
                new ObjectParameter("EmployeeMaritalStatus", employeeMaritalStatus) :
                new ObjectParameter("EmployeeMaritalStatus", typeof(bool));
    
            var employeePrimarySkillParameter = employeePrimarySkill != null ?
                new ObjectParameter("EmployeePrimarySkill", employeePrimarySkill) :
                new ObjectParameter("EmployeePrimarySkill", typeof(string));
    
            var employeePreviousEmployerParameter = employeePreviousEmployer != null ?
                new ObjectParameter("EmployeePreviousEmployer", employeePreviousEmployer) :
                new ObjectParameter("EmployeePreviousEmployer", typeof(string));
    
            var employeePreviousExperienceYearsParameter = employeePreviousExperienceYears.HasValue ?
                new ObjectParameter("EmployeePreviousExperienceYears", employeePreviousExperienceYears) :
                new ObjectParameter("EmployeePreviousExperienceYears", typeof(int));
    
            var employeePreviousExperienceMonthsParameter = employeePreviousExperienceMonths.HasValue ?
                new ObjectParameter("EmployeePreviousExperienceMonths", employeePreviousExperienceMonths) :
                new ObjectParameter("EmployeePreviousExperienceMonths", typeof(int));
    
            var employeeReference1RemarksParameter = employeeReference1Remarks != null ?
                new ObjectParameter("EmployeeReference1Remarks", employeeReference1Remarks) :
                new ObjectParameter("EmployeeReference1Remarks", typeof(string));
    
            var employeeReference2RemarksParameter = employeeReference2Remarks != null ?
                new ObjectParameter("EmployeeReference2Remarks", employeeReference2Remarks) :
                new ObjectParameter("EmployeeReference2Remarks", typeof(string));
    
            var employeeBioDataParameter = employeeBioData != null ?
                new ObjectParameter("EmployeeBioData", employeeBioData) :
                new ObjectParameter("EmployeeBioData", typeof(byte[]));
    
            var documentExtensionParameter = documentExtension != null ?
                new ObjectParameter("DocumentExtension", documentExtension) :
                new ObjectParameter("DocumentExtension", typeof(string));
    
            var employeePhotoParameter = employeePhoto != null ?
                new ObjectParameter("EmployeePhoto", employeePhoto) :
                new ObjectParameter("EmployeePhoto", typeof(byte[]));
    
            var photoExtensionParameter = photoExtension != null ?
                new ObjectParameter("PhotoExtension", photoExtension) :
                new ObjectParameter("PhotoExtension", typeof(string));
    
            var employeeDateofLeavingParameter = employeeDateofLeaving.HasValue ?
                new ObjectParameter("EmployeeDateofLeaving", employeeDateofLeaving) :
                new ObjectParameter("EmployeeDateofLeaving", typeof(System.DateTime));
    
            var employeeReasonforLeavingParameter = employeeReasonforLeaving != null ?
                new ObjectParameter("EmployeeReasonforLeaving", employeeReasonforLeaving) :
                new ObjectParameter("EmployeeReasonforLeaving", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var swipeICodeParameter = swipeICode.HasValue ?
                new ObjectParameter("SwipeICode", swipeICode) :
                new ObjectParameter("SwipeICode", typeof(int));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var groupidParameter = groupid.HasValue ?
                new ObjectParameter("Groupid", groupid) :
                new ObjectParameter("Groupid", typeof(int));
    
            var shiftidParameter = shiftid.HasValue ?
                new ObjectParameter("shiftid", shiftid) :
                new ObjectParameter("shiftid", typeof(int));
    
            var originalnameParameter = originalname != null ?
                new ObjectParameter("originalname", originalname) :
                new ObjectParameter("originalname", typeof(string));
    
            var pseudoParameter = pseudo.HasValue ?
                new ObjectParameter("pseudo", pseudo) :
                new ObjectParameter("pseudo", typeof(bool));
    
            var currenttechnologyParameter = currenttechnology.HasValue ?
                new ObjectParameter("currenttechnology", currenttechnology) :
                new ObjectParameter("currenttechnology", typeof(int));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("picture", picture) :
                new ObjectParameter("picture", typeof(byte[]));
    
            var primaryskillstreamidParameter = primaryskillstreamid.HasValue ?
                new ObjectParameter("primaryskillstreamid", primaryskillstreamid) :
                new ObjectParameter("primaryskillstreamid", typeof(int));
    
            var empphotoParameter = empphoto != null ?
                new ObjectParameter("empphoto", empphoto) :
                new ObjectParameter("empphoto", typeof(string));
    
            var nightshiftParameter = nightshift.HasValue ?
                new ObjectParameter("nightshift", nightshift) :
                new ObjectParameter("nightshift", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_EmployeeMaster", employeeICodeParameter, companyICodeParameter, departmentICodeParameter, designationICodeParameter, employeeNumberParameter, employeeFirstNameParameter, employeeLastNameParameter, employeeDisplayNameParameter, employeeCurrentAddress1Parameter, employeeCurrentAddress2Parameter, employeeCurrentCityParameter, employeeCurrentStateParameter, employeeCurrentCountryParameter, employeeCurrentPinCodeParameter, employeeCurrentPhoneNoParameter, isSameAsCurrentAddressParameter, employeePermanentAddress1Parameter, employeePermanentAddress2Parameter, employeePermanentCityParameter, employeePermanentStateParameter, employeePermanentCountryParameter, employeePermanentPinCodeParameter, employeePermanentPhoneNoParameter, employeeMobileNoParameter, employeeFatherNameParameter, employeeDateofBirthParameter, employeePersonalEmailIdParameter, employeeDateOfJoiningParameter, employeeCorporateEmailIdParameter, employeeIMParameter, loginUserNameParameter, loginPasswordParameter, employeeBloodGroupIdParameter, employeePANNoParameter, employeePFNoParameter, employeeESINoParameter, employeeBankNameParameter, employeeBankAccountNoParameter, employeeMaritalStatusParameter, employeePrimarySkillParameter, employeePreviousEmployerParameter, employeePreviousExperienceYearsParameter, employeePreviousExperienceMonthsParameter, employeeReference1RemarksParameter, employeeReference2RemarksParameter, employeeBioDataParameter, documentExtensionParameter, employeePhotoParameter, photoExtensionParameter, employeeDateofLeavingParameter, employeeReasonforLeavingParameter, isActiveParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, swipeICodeParameter, locationParameter, groupidParameter, shiftidParameter, originalnameParameter, pseudoParameter, currenttechnologyParameter, pictureParameter, primaryskillstreamidParameter, empphotoParameter, nightshiftParameter);
        }
    
        public virtual int sp_update_meeting_Percent(Nullable<int> meetingId, Nullable<int> employeeId, Nullable<decimal> percent, Nullable<int> taskId)
        {
            var meetingIdParameter = meetingId.HasValue ?
                new ObjectParameter("MeetingId", meetingId) :
                new ObjectParameter("MeetingId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(decimal));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_meeting_Percent", meetingIdParameter, employeeIdParameter, percentParameter, taskIdParameter);
        }
    
        public virtual int Sp_Update_MMS_Meeting_Details_Change(Nullable<int> emp_id, Nullable<int> task_Id, Nullable<System.DateTime> completion_Date, Nullable<int> status, Nullable<int> category, Nullable<int> meetingId, string comments, Nullable<System.DateTime> nextReviewDate, Nullable<int> reviewFrequencyID, Nullable<int> commented_by, string task, string priority)
        {
            var emp_idParameter = emp_id.HasValue ?
                new ObjectParameter("emp_id", emp_id) :
                new ObjectParameter("emp_id", typeof(int));
    
            var task_IdParameter = task_Id.HasValue ?
                new ObjectParameter("Task_Id", task_Id) :
                new ObjectParameter("Task_Id", typeof(int));
    
            var completion_DateParameter = completion_Date.HasValue ?
                new ObjectParameter("Completion_Date", completion_Date) :
                new ObjectParameter("Completion_Date", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var meetingIdParameter = meetingId.HasValue ?
                new ObjectParameter("MeetingId", meetingId) :
                new ObjectParameter("MeetingId", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var nextReviewDateParameter = nextReviewDate.HasValue ?
                new ObjectParameter("NextReviewDate", nextReviewDate) :
                new ObjectParameter("NextReviewDate", typeof(System.DateTime));
    
            var reviewFrequencyIDParameter = reviewFrequencyID.HasValue ?
                new ObjectParameter("ReviewFrequencyID", reviewFrequencyID) :
                new ObjectParameter("ReviewFrequencyID", typeof(int));
    
            var commented_byParameter = commented_by.HasValue ?
                new ObjectParameter("commented_by", commented_by) :
                new ObjectParameter("commented_by", typeof(int));
    
            var taskParameter = task != null ?
                new ObjectParameter("task", task) :
                new ObjectParameter("task", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_MMS_Meeting_Details_Change", emp_idParameter, task_IdParameter, completion_DateParameter, statusParameter, categoryParameter, meetingIdParameter, commentsParameter, nextReviewDateParameter, reviewFrequencyIDParameter, commented_byParameter, taskParameter, priorityParameter);
        }
    
        public virtual int Sp_Update_MMS_Meeting_Details_Change1(Nullable<int> meetingId, string meetingObjective, Nullable<System.DateTime> meetingDate, string meetingTime, string meetingDuration, string meetingVenue, string meetingType, string meetingDepartment, Nullable<int> meetingChairperson, string minutesOfMeeting)
        {
            var meetingIdParameter = meetingId.HasValue ?
                new ObjectParameter("MeetingId", meetingId) :
                new ObjectParameter("MeetingId", typeof(int));
    
            var meetingObjectiveParameter = meetingObjective != null ?
                new ObjectParameter("MeetingObjective", meetingObjective) :
                new ObjectParameter("MeetingObjective", typeof(string));
    
            var meetingDateParameter = meetingDate.HasValue ?
                new ObjectParameter("MeetingDate", meetingDate) :
                new ObjectParameter("MeetingDate", typeof(System.DateTime));
    
            var meetingTimeParameter = meetingTime != null ?
                new ObjectParameter("MeetingTime", meetingTime) :
                new ObjectParameter("MeetingTime", typeof(string));
    
            var meetingDurationParameter = meetingDuration != null ?
                new ObjectParameter("MeetingDuration", meetingDuration) :
                new ObjectParameter("MeetingDuration", typeof(string));
    
            var meetingVenueParameter = meetingVenue != null ?
                new ObjectParameter("MeetingVenue", meetingVenue) :
                new ObjectParameter("MeetingVenue", typeof(string));
    
            var meetingTypeParameter = meetingType != null ?
                new ObjectParameter("MeetingType", meetingType) :
                new ObjectParameter("MeetingType", typeof(string));
    
            var meetingDepartmentParameter = meetingDepartment != null ?
                new ObjectParameter("MeetingDepartment", meetingDepartment) :
                new ObjectParameter("MeetingDepartment", typeof(string));
    
            var meetingChairpersonParameter = meetingChairperson.HasValue ?
                new ObjectParameter("MeetingChairperson", meetingChairperson) :
                new ObjectParameter("MeetingChairperson", typeof(int));
    
            var minutesOfMeetingParameter = minutesOfMeeting != null ?
                new ObjectParameter("MinutesOfMeeting", minutesOfMeeting) :
                new ObjectParameter("MinutesOfMeeting", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_MMS_Meeting_Details_Change1", meetingIdParameter, meetingObjectiveParameter, meetingDateParameter, meetingTimeParameter, meetingDurationParameter, meetingVenueParameter, meetingTypeParameter, meetingDepartmentParameter, meetingChairpersonParameter, minutesOfMeetingParameter);
        }
    
        public virtual int sp_update_read_notification(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_read_notification", idParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
