@model dynamic
@{
    ViewBag.Title = "TimeTakenForCompletionReport";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
    string startDateStr = ViewBag.StartDate;
    //string endDateStr = ViewBag.EndDate;
    string endDateStr = Convert.ToDateTime(ViewBag.EndDate).ToString("dd/MMM/yyyy");
}
@*@Styles.Render("~/Content/site.css")*@
<script src="~/Scripts/moment.min.js"></script>
<script src="~/Scripts/bootstrap-datetimepicker.min.js"></script>
<link href="~/Scripts/bootstrap-datetimepicker.min.css" rel="stylesheet" />

<div class="panel panel-primary">
    <div class="panel-heading">
        Time Taken For Completion Report
    </div>
    <div class="panel-body">
        <form name="meetingSearchFrm" id="meetingSearchFrm">
            <fieldset>
                <div class="alert alert-warning">
                    <div class="row">
                        <div class="col-md-2">
                            <div class="input-group-addon input-sm">Start Date</div>
                            @Html.TextBox("assign_start_date", startDateStr, new { @class = "datepick required form-control input-sm fromDate", @style = "background-color:white;", @readonly = "true" })

                        </div>

                        <div class="col-md-2">
                            <div class="input-group-addon input-sm">End Date</div>
                            @Html.TextBox("assign_end_date", endDateStr, new { @class = " required  form-control input-sm toDate", @style = "background-color:white;", @readonly = "true" })
                        </div>

                        <div class="col-md-2">
                            <div class="input-group-addon input-sm">Participants</div>

                            <div class="">

                                @Html.DropDownList("Participants", new SelectList(ViewBag.Participants, "Participant", "Name"), "All", new { @class = "form-control input-sm" })
                            </div>
                        </div>

                        <div class="space" style="margin:10px 10px;"></div>
                        <div class="col-md-3">
                            <div class="row">
                                <div class="col-sm-6 ">
                                    <div class="input-group">
                                        <button type="button" id="btnExport" class="btn btn-primary btn-sm">Export to Excel</button>
                                    </div>


                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <button type="button" id="meetingSearch" class="btn btn-primary btn-sm">Search</button>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </fieldset>           
            <hr />

            <div class="space" style="margin:10px 0px;"></div>
            <div class="row">
                <div class="space" style="margin:25px 0px;"></div>
                <div class="responsive-table" style="padding-left:20px; padding-right:20px">
                    <div id="task-show-result">
                        @{
                            if (ViewBag.MeetingParticipants != null)
                            {
                                <h4 class='task-title'>Time Taken For Completion</h4>

                                <table id="cn_Task_res" class="table table-bordered  col-md-12 col-sm-12 tblTaskPaging ">
                                    <tr>
                                        <th>Task Priority</th>
                                        <th>Total Tasks Assigned </th>
                                        <th>Completed</th>
                                        <th>In Progress</th>
                                        <th>Yet To Begin</th>
                                        <th>Closed</th>
                                        <th>ReOpened</th>
                                        <th> Average Time(Days)</th>
                                        <th>Maximum Time(Days)</th>
                                        <th>Minimum Time(Days)</th>
                                    </tr>
                                    @{
                                        foreach (var items in ViewBag.MeetingParticipants)
                                        {
                                            <tr>
                                                <td>
                                                    @items.Participant
                                                </td>
                                                <td>
                                                    @items.TotalTasks
                                                </td>
                                                <td>
                                                    @items.Completed
                                                </td>
                                                <td>
                                                    @items.InProgress
                                                </td>
                                                <td>
                                                    @items.Assigned
                                                </td>
                                                <td>
                                                    @items.Closed
                                                </td>
                                                <td>
                                                    @items.ReOpened
                                                </td>
                                                <td>
                                                    @items.AVERAGEDays
                                                </td>
                                                <td>
                                                    @items.MAXIMUMDays
                                                </td>
                                                <td>
                                                    @items.MINIMUMDays
                                                </td>
                                            </tr>
                                        }
                                }
                                </table>

                            }
                    }
                    </div>
                </div>
                <div class="space" style="margin:25px 0px;"></div>
                <div class="space" style="margin:10% 0px;"></div>
                <div id="bindTaskComments">
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts
{
    @*@Scripts.Render("~/bundles/jqueryval")
        @Scripts.Render("~/bundles/customVal")
        @Scripts.Render("~/bundles/multiselect")*@
    @Scripts.Render("~/bundles/multiselect")
    <script src="~/Scripts/moment.min.js"></script>
    <script src="~/Scripts/bootstrap-datetimepicker.min.js"></script>

    @*<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>*@
    @*<script src="~/Scripts/jquery.table2excel.js"></script>*@

    @*<script src="//cdn.rawgit.com/rainabba/jquery-table2excel/1.1.0/dist/jquery.table2excel.min.js"></script>*@
    <script src="~/Scripts/jquery.table2excel.min.js"></script>
    @*<script src="~/Scripts/jquery.min.js"></script>*@
    <link href="~/Scripts/bootstrap-datetimepicker.min.css" rel="stylesheet" />
}

<script type="text/javascript">

    var month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

    var start = new Date();
    start.setFullYear(start.getFullYear() - 70);
    var end = new Date();
    end.setFullYear(end.getFullYear() + 1);

    function getCustomDay(dayStr) {
        var day = parseInt(dayStr);
        if (day < 10)
            return '0' + dayStr;
        else
            return dayStr;
    }

    $(function () {
        $('#status').multiselect({
            includeSelectAllOption: true
        });

        //$(".fromDate").datepicker({
        //    changeMonth: false,
        //    changeYear: true,
        //    //minDate: '1/1/1990',
        //    //maxDate: end,
        //    disabled: true,
        //    minDate: new Date('3/1/2017'),
        //    yearRange: 2017 + ':' + end.getFullYear(),
        //    autoclose: true,
        //    dateFormat: 'dd/M/yy',
        //    beforeShowDay: function (date) {
        //        var day = date.getDay();
        //        return [(day != 0), ''];
        //    },
        //    onSelect: function (selected) {
        //        var dt = new Date(selected);
        //        dt.setDate(dt.getDate() + 1);
        //        $(".toDate").datepicker("option", "minDate", dt);
        //    }
        //});
        $(".fromDate").datepicker({
            changeMonth: false,
            changeYear: true,
            //minDate: '1/1/1990',
            //maxDate: end,
            minDate: new Date('3/1/2017'),
            yearRange: 2017 + ':' + end.getFullYear(),
            autoclose: true, disabled: true,
            dateFormat: 'dd/M/yy',
            beforeShowDay: function (date) {
                var day = date.getDay();
                return [(day != 0), ''];
            },
            onSelect: function (selected) {
                var dt = new Date(selected);
                dt.setDate(dt.getDate() + 1);
                $(".toDate").datepicker("option", "minDate", dt);
            }
        });
        $(".dt").datepicker({
            //dateFormat: "mm/dd/yy", minDate: 0,
            dateFormat: "dd/M/yy", minDate: 0,
            changeMonth: true, changeYear: true,
            yearRange: 2017 + ':' + end.getFullYear(),
            autoclose: true,
            beforeShowDay: function (date) {
                var day = date.getDay();
                return [(day != 0), ''];
            },
            onSelect: function (selected) {
                var dt = new Date(selected);
                dt.setDate(dt.getDate() + 1);
                $(".toDate").datepicker("option", "minDate", dt);
            }
        });
    });


    //Participants
    $("#Participants").on('change', function () {
        window.sessionStorage.setItem("Participants", this.value);

        window.sessionStorage.clear();
    });

    $(document).ready(function () {
        $("#Participants").val(window.sessionStorage.getItem("Participants"));
        window.sessionStorage.clear();
    });


    function InitializePaging() {
        var jslink = $("<script src='@Url.Content("~/Scripts/jquery.simplePagination.js")' type='text/javascript'/>");
        $('head').append(jslink);
        $(".tblPaging").simplePagination();
    }
    function IntializeTaskPaging() {
        $(".tblTaskPaging").simplePagination();
    }

    function LoadInitialEvents() {

        var d = new Date();
        var curr_date = getCustomDay(d.getDate());
        var curr_month = month[d.getMonth()];
        var curr_year = d.getFullYear();

        $(".toDate").datepicker({
            autoclose: true, changeMonth: true,
            changeYear: true,
            dateFormat: 'dd/M/yy',
            minDate: '@startDateStr',
            //  maxDate: end,
            yearRange: 2017 + ':' + end.getFullYear(),
            beforeShowDay: function (date) {
                var day = date.getDay();
                return [(day != 0), ''];
            },
            onSelect: function (selected) {
                //var dt = new Date(selected);
                //dt.setDate(dt.getDate() + 1);
                //$(".toDate").datepicker("option", "minDate", dt);

                  var endD = $('.toDate').val();

                $.get('@Url.Action("TimeTakenForCompletion_Report", "CreateTask")', { endD: endD });

            }
        });
        InitializeTasksMeeting();
    }

    function fncOpen() {
        // $('#divAddComment').dialog('open');
        //$("#divAddComment").dialog().dialog('open');            //Commented. Added Modal instead of this.
        $("#divAddComment").modal({ 'backdrop': 'static', 'keyboard': false });

    }

    function InitializeTasksMeeting() {
        $(".task-title,.participant-title").remove();

        //added This for Date Format Issue
        var TEMP_start_date = $("#assign_start_date").val();

        var splitStart = TEMP_start_date.split('/');

        var _start_date = splitStart[1] + "/" + splitStart[0] + "/" + splitStart[2];

        var TEMP_end_date = $("#assign_end_date").val();

        var splitEnd = TEMP_end_date.split('/');

        var _end_date = splitEnd[1] + "/" + splitEnd[0] + "/" + splitEnd[2];

        if (_start_date == null || _start_date == "" && _end_date == null || _end_date == "") {
            alert("Please fill the dates to proceed");
        }
        else {

            $("#cn_Task_res").remove();
            $("#cn_Meeting_Res").remove();

            $(".Paginate").remove();

            var TaskPeriod = $("[name='taskdate']:radio:checked").val();

            if (TaskPeriod == "Tilldate") {

                var date = new Date();
                var dd = getCustomDay(date.getDate());
                var mm = month[date.getMonth()];
                var yy = date.getFullYear();

                var start_date = "01/Mar/2017";
                var end_date = dd + "/" + mm + "/" + yy;

                $("#assign_start_date").val(start_date).toString("dd/MMM/YYYY");
                $("#assign_start_date").prop("disabled", true);

                $("#assign_start_date").disableSelection();

                $("#assign_end_date").val(end_date);
                $("#assign_end_date").prop("disabled", false);

            }
            //Original BACK TO original
            var _start_date = $("#assign_start_date").val();
            var _end_date = $("#assign_end_date").val();

            var participants = $("#Participants option:selected").val();

            if (participants == "") {
                participants = 0;

            }
            var priority = $("#Priority option:selected").text();

            GetMeetingDetails(_start_date, _end_date, participants, priority);
        }
    }

    $(document).ready(function () {
        $('#status').multiselect();
        LoadInitialEvents();
        $("body").on("click", ".ui-dialog-titlebar-close", function () {
            $("#wrapper").removeClass("overlay");
        });

        $("[name='taskdate']").change(function () {

            if ($(this).val() == "Tilldate") {
                date = new Date();
                dd = date.getDate();
                mm = date.getMonth();
                yy = date.getFullYear();
                var start_date = "01/Mar/2017";

                $("#assign_start_date").css("background-color", "#EEEEEE")
                $("#assign_start_date").val(start_date);
                $("#assign_start_date").prop("disabled", true);

                $("#assign_end_date").val('@endDateStr');
            }
            else {
                $("#assign_start_date").prop("disabled", false);
                $("#assign_end_date").prop("disabled", false);
            }
        });

        $("#meetingSearch").click(function (e) {
            //added now
            $("#bindTaskComments").hide();

            InitializeTasksMeeting();
        });

    });


    $(function () {
        $("#btnExport").click(function () {
            $("#cn_Task_res").table2excel({
                filename: "TimeTakenForCompletion"
                // fileext: ".xlsx"
            });
        });
    });


    function RedAlert(status, completion_date) {

        if (status != "Closed") // && status=="In Progress" || status=="Re-opened"
        {
            var newdate = new Date();
            var day = newdate.getDate();
            var month = newdate.getMonth() + 1;
            var year = newdate.getFullYear();
            var TodayDate = month + "/" + day + "/" + year;
            if (new Date(TodayDate) < new Date(completion_date)) {
                return "<img src='../Content/Images/blink_square.gif'/>";
            }
        }
        return "";
    }

    $("body").on("click", ".btn-back", function () {

        $("#meetingSearch").click();

        $(this).hide();

        $("#bindTaskComments").hide();
        $(".task-title,.participant-title").remove();
    });


    function calculate(var1, var2) {
        var result = (var1 / var2);
        result = result * 100;
        if (isNaN(result)) {
            return 0;
        }
        else {
            return result.toFixed(2);
        }
    };

    function dividecalculate(a, b, c,d,e,f) {
        var total_sum = parseInt(d + e + f);
        calculation = parseInt(a + b + c) / total_sum;
        result = calculation * 100;
        if (isNaN(result)) {
            return 0;
        }
        else {
            return result.toFixed(2);
        }
    };

    function GetMeetingDetails(cn_start_date, cn_end_date, SelectedParticipant, cn_priority, back) {

        //console.log(cn_TaskPeriod, cn_start_date, cn_end_date, cn_category, SelectedParticipant, cn_status, cn_priority);

        $.ajax({
            url: "@Url.Action("ReportFetchRes", "MeetingDetails")",
            type: 'GET',

            data: "SDate=" + cn_start_date + "&EDate=" + cn_end_date + "&Participant=" + SelectedParticipant + "&Priority=" + cn_priority,

            dataType: 'JSON',
            contentType: 'Application/JSON;charset=utf-8',
            beforeSend: function () {
                $("#task-show-result").append("<img id='wait' style='max-width:100%;padding:5% 40%;'  src='../Content/Images/wait.gif'/>");
            },
            success: function (resultData)
            {
                console.log(resultData);
                $("#wait").remove();
                var cn_TaskItems = "<h4 class='task-title'>Time Taken For Completion</h4>";
                let width = screen.width;

                //for general users
                if (width > '600')
                {
                    cn_TaskItems += '<table id="cn_Task_res" class="table table-bordered  col-md-12 col-sm-12  ">' +
                        '<th><center>Task Priority</center></th>' +
                        ' <th><center>Total Tasks Assigned</center></th>' +
                        '<th><center>Completed</center></th>' +
                        '<th><center>In Progress</center></th>' +
                        '<th><center>Yet To Begin</center></th>' +
                        '<th><center>Closed</center></th>' +
                        '<th><center>ReOpened</center></th>' +
                        '<th><center>Average Time(Days)</center></th>' +
                        '<th><center>Maximum Time(Days)</center></th>' +
                        '<th><center>Minimum Time(Days)</center></th>';

                    $.each(resultData, function (key, val) {
                        var TaskCnt = 0;

                        if (val != null) {
                            TaskCnt += 1;
                            var emp_arr = [];
                            if (val == null) {
                            }
                            else {
                                var mintime = parseInt(val.HighMINIMUMDays + val.MediumMINIMUMDays + val.LowMINIMUMDays);
                                if (parseInt(val.HighMINIMUMDays + val.MediumMINIMUMDays + val.LowMINIMUMDays) < 0)
                                    mintime = 0;

                                var Mindays = val.LowMINIMUMDays;
                                if (Mindays < 0)
                                    Mindays = 0;

                                cn_TaskItems += "<tr id='tr_HIGH'>" +
                                    "<td><center>HIGH </center></td>" +
                                    "<td id='highassigned'><center>" + parseInt(val.HighAssigned) + "</center></td>" +
                                    "<td id='highcompleted'><center>" + val.HighCompleted + ' ' + '(' + calculate(val.HighCompleted, val.HighAssigned) + '%' + ')' + "</center></td>" +
                                    "<td id='highinprogress'><center>" + val.HighInProgress + ' ' + '(' + calculate(val.HighInProgress, val.HighAssigned) + '%' + ')' + "</center></td>" +
                                    "<td id='highyettobegin'><center>" + val.HighYetToBegin + ' ' + '(' + calculate(val.HighYetToBegin, val.HighAssigned) + '%' + ')' + "</center></td>" +

                                    "<td><center>" + ' ' + val.HighClosed + ' ' + '(' + calculate(val.HighClosed, val.HighAssigned) + '%' + ')' + "</center></td>" +
                                    "<td><center>" + ' ' + val.HighReOpened + ' ' + '(' + calculate(val.HighReOpened, val.HighAssigned) + '%' + ')' + "</center></td>" +

                                    "<td id='highaveragedays'> <center>" + val.HighAVERAGEDays + "</center></td>" +
                                    "<td id='highmaximumdays'><center>" + val.HighMAXIMUMDays + "</center></td>" +
                                    "<td id='highminimumdays'><center>" + val.HighMINIMUMDays + "</center> </td>" +
                                    "</tr>" +
                                    "<tr id='tr_MEDIUM'>" +
                                    "<td><center>MEDIUM</center></td>" +
                                    "<td id='mediumassigned'><center>" + parseInt(val.MediumAssigned) + "</center></td>" +
                                    "<td id='mediumcompleted'><center>" + ' ' + val.MediumCompleted + ' ' + '(' + calculate(val.MediumCompleted, val.MediumAssigned) + '%' + ')' + "</center></td>" +
                                    "<td id='mediuminprogress'><center>" + ' ' + val.MediumInProgress + ' ' + '(' + calculate(val.MediumInProgress, val.MediumAssigned) + '%' + ')' + "</center></td>" +
                                    "<td id=mediumyettobegin><center>" + ' ' + val.MediumYetToBegin + ' ' + '(' + calculate(val.MediumYetToBegin, val.MediumAssigned) + '%' + ')' + "</center></td>" +

                                    "<td><center>" + ' ' + val.MediumClosed + ' ' + '(' + calculate(val.MediumClosed, val.MediumAssigned) + '%' + ')' + "</center></td>" +
                                    "<td><center>" + ' ' + val.MediumReOpened + ' ' + '(' + calculate(val.MediumReOpened, val.MediumAssigned) + '%' + ')' + "</center></td>" +


                                    "<td id='mediumaveragedays'> <center>" + val.MediumAVERAGEDays + "</center></td>" +
                                    "<td id='mediummaximumdays'><center>" + val.MediumMAXIMUMDays + "</center></td>" +
                                    "<td id='mediummaximumdays'><center>" + val.MediumMINIMUMDays + "</center> </td>" +
                                    "</tr>" +
                                    "<tr id='tr_LOW'>" +
                                    "<td><center>LOW</center></td>" +
                                    "<td id='lowassigned'><center>" + parseInt(val.LowAssigned) + "</center></td>" +
                                    "<td id='lowcompleted'><center>" + val.LowCompleted + ' ' + '(' + calculate(val.LowCompleted, val.LowAssigned) + '%' + ')' + "</center></td>" +
                                    "<td id='lowinprogress'><center>" + val.LowInProgress + ' ' + '(' + calculate(val.LowInProgress, val.LowAssigned) + '%' + ')' + "</center></td>" +
                                    "<td id='lowyettobegin'><center>" + val.LowYetToBegin + ' ' + '(' + calculate(val.LowYetToBegin, val.LowAssigned) + '%' + ')' + "</center></td>" +

                                    "<td ><center>" + val.LowClosed + ' ' + '(' + calculate(val.LowClosed, val.LowAssigned) + '%' + ')' + "</center></td>" +
                                    "<td ><center>" + val.LowReOpened + ' ' + '(' + calculate(val.LowReOpened, val.LowAssigned) + '%' + ')' + "</center></td>" +

                                    "<td id='lowaveragedays'><center> " + val.LowAVERAGEDays + "</center></td>" +
                                    "<td id='lowmaximumdays'><center>" + val.LowMAXIMUMDays + "</center></td>" +
                                    "<td id='lowminimumdays'><center>" + Mindays + "</center> </td>" +
                                    "</tr>"
                                    +
                                    "<tr id='tr_Total'>" +
                                    "<td><center>Total</center></td>" +
                                    //"<td id='totalfirst'>" + parseInt(val.HighAssigned + val.MediumAssigned + val.LowAssigned + val.HighClosed + val.MediumClosed + val.LowClosed) + "</td>" +

                                    "<td id='totalfirst'><center>" + parseInt(val.HighAssigned + val.MediumAssigned + val.LowAssigned) + "</center></td>" +

                                    //"<td>" + parseInt(val.HighCompleted + val.MediumCompleted + val.LowCompleted) + ' ' + '(' + (parseInt(val.HighCompleted + val.MediumCompleted + val.LowCompleted) / parseInt(val.HighAssigned + val.MediumAssigned + val.LowAssigned) * 100).toFixed(2) + '%' + ')' + "</td>" +
                                    "<td><center>" + parseInt(val.HighCompleted + val.MediumCompleted + val.LowCompleted) + ' ' + '(' + dividecalculate(val.HighCompleted, val.MediumCompleted, val.LowCompleted, val.HighAssigned, val.MediumAssigned, val.LowAssigned) + '%' + ')' + "</center></td>" +

                                    "<td><center>" + parseInt(val.HighInProgress + val.MediumInProgress + val.LowInProgress) + ' ' + '(' + dividecalculate(val.HighInProgress, val.MediumInProgress, val.LowInProgress, val.HighAssigned, val.MediumAssigned, val.LowAssigned) + '%' + ')' + "</center></td>" +

                                    "<td><center>" + parseInt(val.HighYetToBegin + val.MediumYetToBegin + val.LowYetToBegin) + ' ' + '(' + dividecalculate(val.HighYetToBegin, val.MediumYetToBegin, val.LowYetToBegin, val.HighAssigned, val.MediumAssigned, val.LowAssigned) + '%' + ')' + "</center></td>" +

                                    "<td><center>" + parseInt(val.HighClosed + val.MediumClosed + val.LowClosed) + ' ' + '(' + dividecalculate(val.HighClosed, val.MediumClosed, val.LowClosed, val.HighAssigned, val.MediumAssigned, val.LowAssigned) + '%' + ')' + "</center></td>" +

                                    "<td><center>" + parseInt(val.HighReOpened + val.MediumReOpened + val.LowReOpened) + ' ' + '(' + dividecalculate(val.HighReOpened, val.MediumReOpened, val.LowReOpened, val.HighAssigned, val.MediumAssigned, val.LowAssigned) + '%' + ')' + "</center></td>" +

                                    "<td><center> " + parseInt(val.HighAVERAGEDays + val.MediumAVERAGEDays + val.LowAVERAGEDays) + "</center></td>" +

                                    "<td><center>" + parseInt(val.HighMAXIMUMDays + val.MediumMAXIMUMDays + val.LowMAXIMUMDays) + "</center></td>" +

                                    "<td><center>" + mintime + " </center></td>" +
                                    "</tr>"
                            }
                        }

                        else {
                            cn_TaskItems += "<tr><td colspan='9'>No records found</td></tr>";
                        }
                        cn_TaskItems += "</table>";
                        //cn_Task_res
                    });
                }

                //For Mobile Users
                else
                {
                    cn_TaskItems += '<table id="cn_Task_res" class="table table-bordered  col-md-12 col-sm-12  ">'

                    $.each(resultData, function (key, val)
                    {
                        var TaskCnt = 0;

                        if (val != null)
                        {
                            TaskCnt += 1;

                            var emp_arr = [];

                            if (val == null) { }
                            else
                            {

                                var mintime = parseInt(val.HighMINIMUMDays + val.MediumMINIMUMDays + val.LowMINIMUMDays);
                                if (parseInt(val.HighMINIMUMDays + val.MediumMINIMUMDays + val.LowMINIMUMDays) < 0)
                                    mintime = 0;

                                var Mindays = val.LowMINIMUMDays;
                                if (Mindays < 0)
                                    Mindays = 0;

                                cn_TaskItems += "<tr>" +
                                    "<th class='th-sm'>Task Priority</th>" +
                                    "<td>HIGH</td>" +
                                    "<td>MEDIUM</td>" +
                                    "<td>LOW</td>" +
                                    "<td>Total</td>" +
                                    "</tr>" +
                                    "<tr>" +
                                    "<th class='th-sm'>Total Tasks Assigned</th>" +
                                    "<td>" + parseInt(val.HighAssigned) + "</td>" +
                                    "<td>" + parseInt(val.MediumAssigned) + "</td>" +
                                    "<td>" + parseInt(val.LowAssigned) + "</td>" +
                                    "<td>" + parseInt(val.HighAssigned + val.MediumAssigned + val.LowAssigned) + "</td>" +
                                    "</tr>" +
                                    "<tr>" +
                                    "<th class='th-sm'>Completed</th>" +
                                    "<td>" + val.HighCompleted + ' ' + '(' + calculate(val.HighCompleted, val.HighAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + ' ' + val.MediumCompleted + ' ' + '(' + calculate(val.MediumCompleted, val.MediumAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + val.LowCompleted + ' ' + '(' + calculate(val.LowCompleted, val.LowAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + parseInt(val.HighCompleted + val.MediumCompleted + val.LowCompleted) + ' ' + '(' + dividecalculate(val.HighCompleted, val.MediumCompleted, val.LowCompleted, val.HighAssigned, val.MediumAssigned, val.LowAssigned) + '%' + ')' + "</td>" +
                                    "</tr>" +
                                    "<tr>" +
                                    "<th class='th-sm'>In Progress</th>" +
                                    "<td>" + val.HighInProgress + ' ' + '(' + calculate(val.HighInProgress, val.HighAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + ' ' + val.MediumInProgress + ' ' + '(' + calculate(val.MediumInProgress, val.MediumAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + val.LowInProgress + ' ' + '(' + calculate(val.LowInProgress, val.LowAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + parseInt(val.HighInProgress + val.MediumInProgress + val.LowInProgress) + ' ' + '(' + dividecalculate(val.HighInProgress, val.MediumInProgress, val.LowInProgress, val.HighAssigned, val.MediumAssigned, val.LowAssigned) + '%' + ')' + "</td>" +
                                    "</tr>" +
                                    "<tr>" +
                                    "<th class='th-sm'>Yet To Begin</th>" +
                                    "<td>" + val.HighYetToBegin + ' ' + '(' + calculate(val.HighYetToBegin, val.HighAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + ' ' + val.MediumYetToBegin + ' ' + '(' + calculate(val.MediumYetToBegin, val.MediumAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + val.LowYetToBegin + ' ' + '(' + calculate(val.LowYetToBegin, val.LowAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + parseInt(val.HighYetToBegin + val.MediumYetToBegin + val.LowYetToBegin) + ' ' + '(' + dividecalculate(val.HighYetToBegin, val.MediumYetToBegin, val.LowYetToBegin, val.HighAssigned, val.MediumAssigned, val.LowAssigned) + '%' + ')' + "</td>" +
                                    "</tr>" +
                                    "<tr>" +
                                    "<th class='th-sm'>Closed</th>" +
                                    "<td>" + ' ' + val.HighClosed + ' ' + '(' + calculate(val.HighClosed, val.HighAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + ' ' + val.MediumClosed + ' ' + '(' + calculate(val.MediumClosed, val.MediumAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + val.LowClosed + ' ' + '(' + calculate(val.LowClosed, val.LowAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + parseInt(val.HighClosed + val.MediumClosed + val.LowClosed) + ' ' + '(' + dividecalculate(val.HighClosed, val.MediumClosed, val.LowClosed, val.HighAssigned, val.MediumAssigned, val.LowAssigned) + '%' + ')' + "</td>" +
                                    "</tr>" +
                                    "<tr>" +
                                    "<th class='th-sm'>ReOpened</th>" +
                                    "<td>" + ' ' + val.HighReOpened + ' ' + '(' + calculate(val.HighReOpened, val.HighAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + ' ' + val.MediumReOpened + ' ' + '(' + calculate(val.MediumReOpened, val.MediumAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + val.LowReOpened + ' ' + '(' + calculate(val.LowReOpened, val.LowAssigned) + '%' + ')' + "</td>" +
                                    "<td>" + parseInt(val.HighReOpened + val.MediumReOpened + val.LowReOpened) + ' ' + '(' + dividecalculate(val.HighReOpened, val.MediumReOpened, val.LowReOpened, val.HighAssigned, val.MediumAssigned, val.LowAssigned) + '%' + ')' + "</td>" +
                                    "</tr>" +
                                    "<tr>" +
                                    "<th class='th-sm'>Average Time(Days)</th>" +
                                    "<td>" + val.HighAVERAGEDays + "</td>" +
                                    "<td>" + val.MediumAVERAGEDays + "</td>" +
                                    "<td> " + val.LowAVERAGEDays + "</td>" +
                                    "<td>" + parseInt(val.HighAVERAGEDays + val.MediumAVERAGEDays + val.LowAVERAGEDays) + "</td>" +
                                    "</tr>" +
                                    "<tr>" +
                                    "<th class='th-sm'>Maximum Time(Days)</th>" +
                                    "<td>" + val.HighMAXIMUMDays + "</td>" +
                                    "<td>" + val.MediumMAXIMUMDays + "</td>" +
                                    "<td>" + val.LowMAXIMUMDays + "</td>" +
                                    "<td>" + parseInt(val.HighMAXIMUMDays + val.MediumMAXIMUMDays + val.LowMAXIMUMDays) + "</td>" +
                                    "</tr>" +
                                    "<tr>" +
                                    "<th class='th-sm'>Minimum Time(Days)</th>" +
                                    "<td>" + val.HighMINIMUMDays + "</td>" +
                                    "<td>" + val.MediumMINIMUMDays + "</td>" +
                                    "<td>" + Mindays + "</td>" +
                                    "<td>" + mintime + "</td>" +
                                    "</tr>"
                            }
                        }
                        else {
                            cn_TaskItems += "<tr><td colspan='9'>No records found</td></tr>";
                        }
                        cn_TaskItems += "</table>";
                        //cn_Task_res
                    });
                }

                    if (back == null)
                    {
                        $("#task-show-result").append(cn_TaskItems);
                    }
                    else
                    {
                        $("#task-show-result").append("<input type='button' class='btn btn-primary btn-sm btn-back pull-right' value='back'  />" + cn_TaskItems);
                    }
                    IntializeTaskPaging();
                
            },
            error: function (xhr, errorType, exception)
            {
                var responseText = jQuery.parseJSON(xhr.responseText);

                console.log(responseText.ExceptionType);
                console.log(responseText.StackTrace);
                console.log(responseText.Message);
            }
        });
    }
</script>
