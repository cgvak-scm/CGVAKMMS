@model MMS.Models.MeetingEditDetails
@{
    string CompletionDateStr = ViewBag.CompletionDate;
    string ReviewDateStr = ViewBag.ReviewDate;
    string PriorityStr = ViewBag.Priority;    
}
<form id="MeetingEditFrm" name="MeetingEditFrm" class="MeetingEditFrm">
    @Html.HiddenFor(m => m.TaskID, new { @class = "hdnTaskID" })
    <div class="modal-header" id="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <b>Edit Task 001</b>
    </div>

    <div class="modal-body">
        <div class="form-horizontal">

            <div class="row">
                <div class="col-md-6">


                    <div class="form-group">
                        @Html.Label("Responsible Person", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @*@Html.DisplayFor(model => model.RespPerson, new { htmlattributes = new { @class = "form-control", required = "true" } })*@
                            @Html.DisplayFor(model => model.ResponsiblePerson, new { htmlattributes = new { @class = "form-control", required = "true" } })
                            @Html.HiddenFor(model => model.empId)
                        </div>
                    </div>

                    @*<div class="form-group">
                            @Html.Label("Priority", htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.DisplayFor(model => model.Priority, new { htmlattributes = new { @class = "form-control" } })

                            </div>
                        </div>*@

                    <div class="form-group">
                        @Html.Label("Priority", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-4">
                            @if (PriorityStr == "Low")
                            {
                                @Html.DropDownList("Priority", new List<SelectListItem>
                                {
                                new SelectListItem {Text="High",Value="2"},
                                new SelectListItem { Text="Medium",Value="1"},
                                }, PriorityStr, new { @class = "form-control input-sm Priority"})
                            }

                            @if (PriorityStr == "Medium")
                            {
                                @Html.DropDownList("Priority", new List<SelectListItem>
                                {
                                new SelectListItem {Text="High",Value="2"},
                                new SelectListItem { Text="Low",Value="0"}
                                }, PriorityStr, new { @class = "form-control input-sm Priority"})
                            }


                            @if (PriorityStr == "High")
                            {
                                @Html.DropDownList("Priority", new List<SelectListItem>
                                {
                                new SelectListItem { Text="Medium",Value="1"},
                                new SelectListItem { Text="Low",Value="0"}
                                }, PriorityStr, new { @class = "form-control input-sm Priority" })
                            }

                        </div>
                    </div>

                    @**@

                    <div class="form-group">
                        @Html.Label("Completion Date", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.CompletionDate, CompletionDateStr, new { htmlattributes = new { @class = "form-control datepicker", dateFormat = "dd/M/yy", required = "true", disabled = "disabled", @readonly = "readonly" } })
                        </div>
                    </div>



                    <div class="form-group">
                        @Html.Label("Review Date", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.ReviewDate, ReviewDateStr, new { htmlattributes = new { @class = "form-control reviewdatepicker", id= "reviewdate", dateFormat = "dd/M/yy", required = "true", disabled = "disabled", @readonly = "readonly" } })
                        </div>
                    </div>


                </div>

                <input type="hidden" value="@Model.RespPerson" id="respPerson" />

                <div class="col-md-6">
                    <p><strong>Task</strong></p>

                    <div class="task" style="overflow-y:auto;height: 105px;">

                        @Html.DisplayFor(model => model.Task, new { htmlattributes = new { @class = "form-control" } })

                    </div>
                </div>
                <div class="col-md-6"><div class="form-group"></div></div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.Label("Review Frequency", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownList("Review Frequency", (IEnumerable<SelectListItem>)ViewBag.Rev_Frequency, new { @class = "form-control RevFrequency", id= "ReviewFrequency", required = "true"})
                        </div>
                    </div>
                </div>
            </div>

            @Html.HiddenFor(model => model.meetingId)
            @Html.HiddenFor(model => model.Task)

            <div class="row">
                <div class="modal-header" id="modal-header">
                    <b>Status Update</b>
                </div>

            </div>

            <div class="row">


                <div class="col-md-12">
                    <div class="form-group">
                        @Html.Label("Comments", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">

                            @*original*@
                            @*@Html.TextArea("txtComments", new { @class = "form-control", @rows = "3" })*@
                            @Html.TextAreaFor(model => model.Comments, new { @class = "form -control", @rows = "5", @cols = "95", @style = "resize: none;" })
                        </div>
                    </div>

                    <div class="row">



                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.Label("Task Status", htmlAttributes: new { @class = "control-label col-md-4" })

                                <div class="col-md-8">

                                    @*@Html.DropDownList("Status", (IEnumerable<SelectListItem>)ViewBag.SelectedStatus, new { @class = "form-control TaskStatus", required = "true" })*@
                                    @Html.DropDownList("Status", new SelectList(ViewBag.SelectedStatus,"ID","Name"), new { @class = "form-control TaskStatus", required = "true" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                               

                                @Html.Label("Category", htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @*@Html.DropDownList("DrpCategory", new SelectList(ViewBag.Categories, "ID", "CategoryName"), new { @class = "form-control Category",@id= "DrpCategory", required = "true" })*@
@Html.DropDownListFor(n => n.selectedCategory, new SelectList(ViewBag.Categories, "ID", "CategoryName", 1), new { @class = "form-control Category", @id = "DrpCategory", required = "true" })

                                </div>

                            </div>
                        </div>
                    </div>
                </div>

                @{ var MeetingId = Model.meetingId; }
                <input type="hidden" value="@MeetingId" id="meeting_id" />

                <input type="hidden" value="@Model.empId" id="Emp_id" />
                <input type="hidden" value="@Model.TaskID" id="Task_Id" />


            </div>

            @{
                if (ViewBag.Attachments.Count > 0)
                {
                    <div class="row">
                        <div class="col-md-12">
                            <div class="row">
                                <div class="statusup">
                                    <b>Attachment files</b>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">

                            @{
                                foreach (var item in ViewBag.Attachments)
                                {
                                    <a href="@Url.Action("Download", "AttachMent", new { fileName = item.MMS_FileName })">@item.MMS_FileName</a><br />

                                }
                            }


                        </div>
                    </div>
                                }
            }


            <div class="row">
                <div class="col-md-12 pull-right">
                    <div class="row">
                        <div class="modal-footer">
                            <p id="resMsg" style="color:forestgreen;"></p>
                            <input type="button" class="btn btn-primary" id="save" value="Save" />
                            <button type="button" class="btn btn_close btn-default hide" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>

            @{

                if (Model.Comment != null)
                {
                    <div class="row" style="overflow-y:auto;height: 200px;">
                        <div class="modal-header" id="modal-header">
                            <b>Comment List</b>

                        </div>
                        @foreach (var item in Model.Comment)
                        {
                            <div style="padding:10px 10px;">
                                <p style="background-color:lightgreen">@item.comments</p>
                                <p><i>commented by:</i> @item.commented_By on @item.commented_date </p>
                                @*<p><i>commented by:</i> @item.commented_person on @item.commented_date </p>*@

                            </div>
                        }
                    </div>

                }

            }

        </div>


    </div>

</form>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*@Scripts.Render("~/bundles/customVal")*@
    @Scripts.Render("~/bundles/customValScript")
}
<script>

    var month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];


    $(document).ready(function () {
      

        var date = new Date();
        date.setDate(date.getDate());
        $("#bindTaskComments").hide();
        //original
        //$(".datepicker").datepicker({ format: "dd/mm/yyyy", autoclose: true });
        ///july 7 edited -EditTaskDetails
        var getDate = new Date();
        getDate.setDate(getDate.getDate());

        $(".datepicker").datepicker({
            //dateFormat: "mm/dd/yy", minDate: 0,
            dateFormat: "dd/M/yy", minDate: 0,
            changeMonth: true, changeYear: true,
            beforeShowDay: function (date) {
                var day = date.getDay();
                return [(day != 0), ''];
            },
            startDate: getDate, autoclose: true
        });

        ///Adding key down method to avoid user input by entering value,   because Readonly field is not validating.
        $('.datepicker').keydown(function () {
            return false;
        });

        

        //For Review Date

        $(".reviewdatepicker").datepicker({
            dateFormat: "dd/M/yy", minDate: 0,
            changeMonth: true, changeYear: true,
            // beforeShowDay: $.datepicker.noWeekends,
            startDate: getDate, autoclose: true,
            beforeShowDay: function (date) {
                var day = date.getDay();
                return [(day != 0), ''];
            },
        });


        ///Adding key down method to avoid user input by entering value,   because Readonly field is not validating.
        $('.reviewdatepicker').keydown(function () {
            return false;
        });




        $("#save").click(function () {

            //var isValid = $(".MeetingEditFrm").valid();
            
            var RespPerson = $("#respPerson").val();
            var txtDate = $(".datepicker").val();
            var revdate = $(".reviewdatepicker").val();
            var TaskStatus = $(".TaskStatus option:selected").val();
            var RevFrequency = $(".RevFrequency option:selected").val();
            var Category = $("#DrpCategory option:selected").val();

            var Priority = $(".Priority option:selected").text();

            //var Comments = $("#txtComments").val();

            var Comments = $("#Comments").val();
            var MeetingId = $("#meeting_id").val();

            var EmpId = $("#Emp_id").val();
            var Task = $("#Task").val();
            var taskId = $("#Task_Id").val();
            revdate = revdate == '01/Jan/0001' ? '' : revdate;
            //alert(revdate);
            //if( RespPerson!="" && txtDate!="" &&   TaskStatus!=""  &&  Category !="" &&  Comments!="")            //Commented. Instead of this, added required fields in these controls.
            if ($(".MeetingEditFrm").valid()) {
                
                $.ajax({
                    //original Error-->
                    @*url: "@Url.Action("UpdateMeetingDetails", "MeetingDetails")",
                    data: JSON.stringify({ "respPerson": RespPerson, "date": txtDate, "taskStatus": TaskStatus, "category": Category, "comments": Comments, "meetingId": MeetingId, "empId": EmpId, "task": Task, "taskId": taskId }),
                    type: 'post',*@                    
                    url: "@Url.Action("UpdateMeetingDetails","MeetingDetails")",

                    data: "respPerson=" + RespPerson + "&date=" + txtDate + "&taskStatus=" + TaskStatus + "&category=" + Category + "&comments=" + Comments + "&meetingId=" + MeetingId + "&empId=" + EmpId + "&task=" + Task + "&taskId=" + taskId + "&revdate=" + revdate + "&ReviewFrequency=" + RevFrequency + "&Priority=" + Priority + "&category=" + Category,
                    
                    type: 'GET',

                    dataType: 'JSON',
                    contentType: 'application/json;charset=utf-8',
                    success: function (resData) {

                        if (!$(".notifyEdit").hasClass("active")) {
                            $("#meetingSearch").click();
                        } else {
                            window.location.reload();
                        }

                        $(".btn_close").click();

                    }
                });
            }
            //else {
            //    alert("Please fill the fields");
            //}


        });

        $("#TaskStatus option").each(function () {

            var selectedVal = $("#TaskStatus option:first-child").val();

            if (selectedVal == $(this).val()) {
                $("#TaskStatus option[value='" + selectedVal + "']").remove();
            }
        });



        $("#RevFrequency option").each(function () {

            var selectedVal = $("#RevFrequency option:first-child").text();

            if (selectedVal == $(this).val()) {
                $("#RevFrequency option[value='" + selectedVal + "']").remove();
            }
        });


        //Change ReviewFrequency Event
        $(".RevFrequency").change(function () {            
            var value = $("#ReviewFrequency").val();
            var dt = new Date();

            var thisDate = AddDaysToDate(dt, value, "/");
            $("#reviewdate").val(thisDate);
        });

        function AddDaysToDate(sDate, iAddDays, sSeperator) {
            //Purpose: Add the specified number of dates to a given date.
            var date = new Date(sDate);
            date.setDate(date.getDate() + parseInt(iAddDays));
            var monthVal = LPad(date.getMonth() + 1, 2) - 1;

            var sEndDate = LPad(date.getDate(), 2) + sSeperator + month[monthVal] + sSeperator + date.getFullYear();
            return sEndDate;
        }
        function LPad(sValue, iPadBy) {
            sValue = sValue.toString();

            return sValue.length < iPadBy ? LPad("0" + sValue, iPadBy) : sValue;
        }
    });



    var listFreq = [];
    listFreq.push("<select  class='form-control RevFrequency' ><option val=''>---Select---</option>");

    var ReviewFrequencies =  @Html.Raw(Json.Encode(ViewBag.Rev_Frequency))

    $.each(ReviewFrequencies, function (key, val) {
        listFreq.push('<option value="' + val.Freq_Name + '">' + val.Freq_Name + '</option>');
        //listFreq.push('<option value="' + val.Freq_Id + '">' + val.Freq_Name + '</option>');
    });

    
</script>
