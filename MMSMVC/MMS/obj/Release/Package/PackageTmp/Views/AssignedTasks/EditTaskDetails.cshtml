@model MMS.Models.MeetingEditDetails
@{
    string startTaskStr = ViewBag.StartDate;
    string endDateStr = ViewBag.EndDate;
}

<form id="MeetingEditFrm" name="MeetingEditFrm">

    <div class="modal-header" id="modal-header">
        <button type="button" class="btn_close close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <b>Edit Task</b>
    </div>
    <div class="modal-body">
        <div class="form-horizontal">

            <div class="row">


                <div class="col-md-6">

                    <div class="form-group">
                        @*@Html.LabelFor(model => model.ResponsiblePerson, htmlAttributes: new { @class = "control-label col-md-4" })*@
                        @Html.Label("Responsible Person", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8" id="RespPersonDIV">
                            @Html.DisplayFor(model => model.ResponsiblePerson, new { htmlattributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <div class="form-group">
                        @{var selectedPriority = string.IsNullOrEmpty(Convert.ToString(Model.Priority)) ? "---SELECT---" : Model.Priority.ToString(); }
                        @Html.Label("Priority", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownList("Priority", new SelectList(ViewBag.AlteredPriority, "Name", "Name", selectedPriority), htmlAttributes: new { @class = "form-control priority", @id = "Prio" })
                        </div>
                    </div>                    
                    <div class="form-group">
                        @*@Html.LabelFor(model => model.CompletionDate, htmlAttributes: new { @class = "control-label col-md-4" })*@
                        @Html.Label("Completion Date", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.CompletionDate, endDateStr, new { htmlattributes = new { @class = "edit_datepicker form-control" } })
                        </div>
                    </div>

                </div>

                <div class="col-md-6">

                    <p><strong>Task</strong></p>

                    <div class="task" id="TaskDIV">

                        @Html.DisplayFor(model => model.Task, new { htmlattributes = new { @class = "form-control" } })

                    </div>

                </div>



                @Html.HiddenFor(model => model.meetingId)

            </div>



            <div class="row">
                <div class="modal-header" id="modal-header">
                    <b>Status Update</b>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        @Html.Label("Comments", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.Comments, new { @class = "form -control", @rows = "5", @cols = "95", @style = "resize: none;" })
                        </div>
                    </div>

                    <div class="row">

                        @*<div class="col-md-6">

                            <div class="form-group">
                                @{var selectedStatus = string.IsNullOrEmpty(Convert.ToString(Model.Status)) ? "---SELECT---" : Model.Status.ToString(); }
                                @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.DropDownList("Status", (IEnumerable<SelectListItem>)ViewBag.SelectedStatus, htmlAttributes: new { @class = "form-control ddlUpdStatus" })

                            @*COmment the below line

                                   Html.DropDownList("Status", new SelectList(ViewBag.Status, "ID", "Name", selectedStatus), htmlAttributes: new { @class = "form-control" })
                                </div>
                            </div>
                        </div>*@

            <div class="col-md-6">

                <div class="form-group">
                    @{var selectedStatus = string.IsNullOrEmpty(Convert.ToString(Model.Status)) ? "---SELECT---" : Model.Status.ToString(); }
                    @Html.Label("Task Status", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @*@Html.DropDownList("Status", (IEnumerable<SelectListItem>)ViewBag.SelectedStatus, htmlAttributes: new { @class = "form-control ddlUpdStatus" })*@
                        @Html.DropDownList("Status", new SelectList(ViewBag.AlteredStatus, "ID", "Name", selectedStatus), htmlAttributes: new { @class = "form-control" })
                    </div>
                </div>
            </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                @{var selectedCat = string.IsNullOrEmpty(Convert.ToString(Model.selectedCategory)) ? "---SELECT---" : Model.selectedCategory.ToString(); }

                                @Html.Label("Category", htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @*@if (selectedCat == "---SELECT---")
                                    {*@
                                        @Html.DropDownList("DrpCategory", new SelectList(ViewBag.AlternateCategories, "ID", "CategoryName", selectedCat), htmlAttributes: new { @class = "form-control" })
                                    @*}*@
                                    @*else
                                    {
                                        @Html.DropDownList("DrpCategory", (IEnumerable<SelectListItem>)ViewBag.Categories, htmlAttributes: new { @class = "form-control" })

                                    }*@
                                </div>
                            </div>
                        </div>
                        <br /><br /><br />
                        <div id="Percentage_Update">

                            <div class="row" style="margin-left: 0;margin-right: 0;" row="1">
                                <div class="modal-header" id="modal-header">
                                    <b>Percentage Update</b>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="col-md-10">
                                        <div class="form-group">
                                            <div class="col-md-4">@Html.Label("Completed Percentage", htmlAttributes: new { @class = "control-label" })</div>

                                            <div class="col-md-2">
                                                @Html.Editor("Percentage", new { htmlattributes = new { @class = "form-control", onkeypress = "return IsValidPercentage(event)" } })
                                            </div>
                                        </div>
                                    </div>



                                </div>
                            </div>

                        </div>
                        @{ var MeetingId = Model.meetingId; }
                        <input type="hidden" value="@MeetingId" id="meeting_id" />

                        @{ var EmpId = Model.empId; }
                        <input type="hidden" value="@EmpId" id="Emp_id" />

                        @*added newly*@
                        @{ var TaskID = Model.TaskID; }
                        <input type="hidden" value="@TaskID" id="Task_id" />

                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12 pull-right">
                    <div class="row">
                        <div class="modal-footer">
                            <p id="resMsg" style="color:forestgreen;"></p>
                            <input type="button" class="btn btn-primary" 
                                    value="Save Task" id="save"/>
                        </div>
                    </div>
                </div>
            </div>
            <div style="overflow-y:auto;height:150px">
                @{
                    foreach (var res in ViewBag.CommentsList)
                    {

                        if (string.Equals(res.Commented_by, Session["LoggedEmployeeName"].ToString()))
                        {
                            <div class="text-left bs-callout bs-callout-left">
                                <p>
                                    @res.Comments
                                </p>

                            </div>
                            <div class="footer text-left">

                                @res.Commented_by<small class="text-muted">
                                    <span class="glyphicon glyphicon-time"></span> @Convert.ToDateTime(res.StatusDate)
                                </small>
                            </div>

                        }
                        else
                        {

                            <div class="text-right bs-callout bs-callout-right">
                                <p>
                                    @res.Comments
                                </p>

                            </div>
                            <div class="footer text-right">
                                @* The below code has been written because the ID of the Person gets displayed instead of the name *@

                                @{
                                    int person = @res.Commented_by;
                                    MMS.Models.MMSCGVAKDBEntities db = new MMS.Models.MMSCGVAKDBEntities();
                                    string display = db.Employee_Master.Where(x => x.EmployeeICode == person).Select(x => x.EmployeeDisplayName).FirstOrDefault();
                                    //display =Convert.ToString(@res.Commented_by );
                                }
                                @*res.Commented_by*@
                                @display<small class="text-muted">
                                    <span class="glyphicon glyphicon-time"></span> @Convert.ToDateTime(res.StatusDate)
                                </small>
                            </div>

                                        }


                                    }

                }

            </div>


        </div>
    </div>

</form>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*@Scripts.Render("~/bundles/customVal")*@

    @Scripts.Render("~/bundles/customValScript")
}


<script>
    function IsValidPercentage(evt) {
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;

        if (charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }
        else {
            var oldPercentage = $("#txtPercent").val();
            var enteredValue = String.fromCharCode(charCode);
            var newValue = oldPercentage + enteredValue;

            if (parseInt(newValue) > 100)
                return false;
        }
        return true;
    }

    $(document).ready(function () {
        $("#Percentage_Update").hide();
        var date = new Date();
        date.setDate(date.getDate());




        //original------>
        //$(".edit_datepicker").datepicker({ startDate: date, orientation: "auto", autoclose: true });

        ///edited -For correct date Format
        var getDate = new Date();
        getDate.setDate(getDate.getDate());

        $(".edit_datepicker").datepicker({
            dateFormat: "dd/M/yy", minDate: 0,
            changeMonth: true, changeYear: true,
            startDate: getDate, autoclose: true
        });

        $("#Status").change(function () {
            var newstat = $(".ddlUpdStatus").val();
            if (newstat == "IN PROGRESS") {
                $("#Percentage_Update").show();
            }
            else {
                $("#Percentage_Update").hide();
            }



        });

        ///Adding key down method to avoid user input by entering value,   because Readonly field is not validating.
        $('.edit_datepicker').keydown(function () {
            return false;
        });



        $("#save").click(function () {

            
            //original-error
            //var RespPerson = $("#RespPerson").val();
            var RespPerson = $("#RespPersonDIV").text().trim();

            //original-error
            //var txtDate = $("#completionDate").val();
            var txtDate = $("#CompletionDate").val();

            //original-error
            //var TaskStatus = $("#TaskStatus option:selected").text();
            var TaskStatus = $("#Status option:selected").val();

            //original-error
            //var Category = $("#DrpCategory option:selected").val();
            var Category = $("#DrpCategory option:selected").val();

            //var Comments = $("#txtComments").val();
            //changed
            var Comments = $("#Comments").val();

            var MeetingId = $("#meeting_id").val();

            var TaskId = $("#Task_id").val();

            var EmpId = $("#Emp_id").val();

            //original-error
            //var Task = $("#Task").val();
            var TaskVal = $("#TaskDIV").text().trim();

            var priority = $("#Prio").val();
            var status = $("#ddlUpdStatus").val();


            var task = TaskStatus.toLowerCase();
            
            if (task == "in progress") {
                var percent = $("#Percentage").val();

                if (TaskStatus != "" && Category != "" && Comments != "" && percent != "") {                    

                    $.ajax({

                        //original-error
                        url: "@Url.Action("UpdateMeetingDetails1","MeetingDetails")",

                        data: "respPerson=" + RespPerson + "&date=" + txtDate + "&taskStatus=" + TaskStatus + "&category=" + Category + "&comments=" + Comments + "&meetingId=" + MeetingId + "&empId=" + EmpId + "&task=" + TaskVal + "&taskId=" + TaskId + "&percentage=" + percent + "&priority=" + priority + "&status=" + status + "&Category=" + category,
                        //type: 'post',

                        type: 'GET',
                        dataType: 'JSON',
                        contentType: 'application/json;charset=utf-8',
                        success: function (resData) {
                            //alert(resData);
                            $("#Assigned").load("EditTaskDetails.cshtml #Assigned");
                   
                           // location.reload();
                            $(".btn_close").click();
                            $("#btn_view_tasks").click();
                            //GetMeetingStatus(MeetingId);
                        }
                    });
                }
                else {
                    alert("Please fill the fields!");
                }
            }
            else {
                if (TaskStatus != "" && Category != "" && Comments != "") {


                    $.ajax({
                        url: "@Url.Action("UpdateMeetingDetails", "MeetingDetails")",

                        data: "respPerson=" + RespPerson + "&date=" + txtDate + "&taskStatus=" + TaskStatus + "&category=" + Category + "&comments=" + Comments + "&meetingId=" + MeetingId + "&empId=" + EmpId + "&task=" + TaskVal + "&taskId=" + TaskId + "&priority=" + priority + "&status=" + status,

                        type: 'GET',
                        dataType: 'JSON',
                        contentType: 'application/json;charset=utf-8',
                        success: function (resData) {
                            //alert(resData);
                            $(".btn_close").click();
                            //windows.location.href = "@Url.Action("Index", "AssignedTasks")";
                            $("#Assigned").load("EditTaskDetails.cshtml #Assigned");
                            $("#btn_view_tasks").click();
                        }
                    });
                }
                else {
                    alert("Please fill the fields!");
                }
            }
        });

        $("#TaskStatus option").each(function () {

            var selectedVal = $("#TaskStatus option:first-child").text();

            if (selectedVal == $(this).val()) {
                $("#TaskStatus option[value='" + selectedVal + "']").remove();
            }
        });

    });

</script>






